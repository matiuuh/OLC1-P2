/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,37],$V2=[1,47],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,38],$V7=[1,39],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,48],$Vg=[1,49],$Vh=[1,50],$Vi=[1,51],$Vj=[1,52],$Vk=[1,53],$Vl=[1,54],$Vm=[2,5,34,35,49,51,52,55,57,59,60,61,68,71,73,74,75,76,77,78,79,80,83,84,85,86,87,91,93,95,96,97,98,99,100],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,81],$Vt=[2,5,34,35,39,47,49,50,51,52,55,57,59,60,61,68,71,73,74,75,76,77,78,79,80,81,83,84,85,86,87,91,93,95,96,97,98,99,100],$Vu=[1,101],$Vv=[1,123],$Vw=[40,63],$Vx=[1,147],$Vy=[36,46],$Vz=[2,44],$VA=[1,150],$VB=[1,157],$VC=[2,5,34,35,47,49,50,51,52,55,57,59,60,61,68,71,73,74,75,76,77,78,79,80,83,84,85,86,87,91,93,95,96,97,98,99,100],$VD=[1,166],$VE=[1,167],$VF=[1,174],$VG=[35,50],$VH=[1,194],$VI=[1,198],$VJ=[47,50],$VK=[1,213];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaraciones":7,"asignacion":8,"casteo":9,"incrementar":10,"decrementar":11,"listas":12,"condicion_si":13,"seleccion_multiple":14,"ciclo_para":15,"ciclo_mientras":16,"ciclo_repetir_hasta":17,"funciones":18,"procedimientos":19,"llamada_funcion":20,"objetos":21,"metodo_objeto":22,"instanciacion_objetos":23,"objetos_accesos_metodos":24,"impresion":25,"hacer_minuscula":26,"hacer_mayuscula":27,"hacer_longitud":28,"hacer_truncar":29,"hacer_redondear":30,"averiguar_tipo":31,"declaracion_simple":32,"declaracion_multiple":33,"INGRESAR":34,"IDENTIFICADOR":35,"COMO":36,"tipo_dato":37,"declaracion_valor_simple":38,"CON_VALOR":39,"expresion":40,"identificadores_multiples":41,"declaracion_valor_multiple":42,"lista_expresiones":43,"asignacion_simple":44,"asignacion_multiple":45,"ARROW":46,"COMA":47,"resto_identificadores":48,"PARENTESIS_ABRIR":49,"PARENTESIS_CERRAR":50,"INCREMENTO":51,"DECREMENTO":52,"LISTA":53,"lista_valores":54,"SI":55,"ENTONCES":56,"FIN_SI":57,"fin_condicion_si":58,"DE_LO_CONTRARIO":59,"O_SI":60,"SEGUN":61,"opciones":62,"FIN_SEGUN":63,"seleccion":64,"HACER":65,"EN_CASO_DE_SER":66,"sentencias_de_transferencia":67,"PARA":68,"HASTA":69,"CON_INCREMENTO":70,"FIN_PARA":71,"CON_DECREMENTO":72,"MIENTRAS":73,"FIN_MIENTRAS":74,"REPETIR":75,"HASTA_QUE":76,"DETENER":77,"CONTINUAR":78,"RETORNAR":79,"FUNCION":80,"CON_PARAMETROS":81,"lista_parametros":82,"FIN_FUNCION":83,"PROCEDIMIENTO":84,"FIN_PROCEDIMIENTO":85,"EJECUTAR":86,"OBJETO":87,"atributos":88,"atributo":89,"METODO":90,"FIN_METODO":91,"PUNTO":92,"IMPRIMIR":93,"NUEVALINEA":94,"MINUSCULA":95,"MAYUSCULA":96,"LONGITUD":97,"TRUNCAR":98,"REDONDEAR":99,"TIPO":100,"ENTERO":101,"DECIMAL":102,"CARACTER":103,"BOOLEANO":104,"CADENA":105,"expresion_binaria":106,"expresion_unaria":107,"||":108,"&&":109,"==":110,"!=":111,">=":112,"<=":113,"<":114,">":115,"+":116,"-":117,"*":118,"/":119,"%":120,"^":121,"factor":122,"!":123,"ENTERO_VALOR":124,"DECIMAL_VALOR":125,"CADENAS_VALOR":126,"CARACTER_VALOR":127,"TRUE":128,"FALSE":129,"TILDE_IZQUIERDA":130,"TILDE_DERECHA":131,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",34:"INGRESAR",35:"IDENTIFICADOR",36:"COMO",39:"CON_VALOR",40:"expresion",46:"ARROW",47:"COMA",49:"PARENTESIS_ABRIR",50:"PARENTESIS_CERRAR",51:"INCREMENTO",52:"DECREMENTO",53:"LISTA",55:"SI",56:"ENTONCES",57:"FIN_SI",59:"DE_LO_CONTRARIO",60:"O_SI",61:"SEGUN",63:"FIN_SEGUN",65:"HACER",66:"EN_CASO_DE_SER",68:"PARA",69:"HASTA",70:"CON_INCREMENTO",71:"FIN_PARA",72:"CON_DECREMENTO",73:"MIENTRAS",74:"FIN_MIENTRAS",75:"REPETIR",76:"HASTA_QUE",77:"DETENER",78:"CONTINUAR",79:"RETORNAR",80:"FUNCION",81:"CON_PARAMETROS",83:"FIN_FUNCION",84:"PROCEDIMIENTO",85:"FIN_PROCEDIMIENTO",86:"EJECUTAR",87:"OBJETO",90:"METODO",91:"FIN_METODO",92:"PUNTO",93:"IMPRIMIR",94:"NUEVALINEA",95:"MINUSCULA",96:"MAYUSCULA",97:"LONGITUD",98:"TRUNCAR",99:"REDONDEAR",100:"TIPO",101:"ENTERO",102:"DECIMAL",103:"CARACTER",104:"BOOLEANO",105:"CADENA",108:"||",109:"&&",110:"==",111:"!=",112:">=",113:"<=",114:"<",115:">",116:"+",117:"-",118:"*",119:"/",120:"%",121:"^",123:"!",124:"ENTERO_VALOR",125:"DECIMAL_VALOR",126:"CADENAS_VALOR",127:"CARACTER_VALOR",128:"TRUE",129:"FALSE",130:"TILDE_IZQUIERDA",131:"TILDE_DERECHA"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[32,5],[38,2],[38,0],[33,5],[42,2],[42,0],[8,1],[8,1],[44,3],[45,3],[41,4],[48,3],[48,0],[9,4],[10,4],[11,4],[12,12],[13,5],[13,5],[58,3],[58,3],[14,4],[62,2],[62,1],[64,7],[15,11],[15,11],[16,5],[17,4],[67,1],[67,1],[67,1],[18,9],[18,5],[19,8],[19,4],[20,5],[20,4],[21,5],[88,2],[88,1],[89,2],[22,6],[22,10],[23,9],[24,3],[24,6],[24,7],[25,2],[25,3],[26,4],[27,4],[28,4],[29,4],[30,4],[31,4],[37,1],[37,1],[37,1],[37,1],[37,1],[106,1],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[107,1],[107,2],[107,2],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,3],[54,5],[54,3],[82,4],[82,2],[43,3],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{1:[3]},{2:$V0,5:[1,56],6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,20]),o($Vm,[2,21]),o($Vm,[2,22]),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),o($Vm,[2,26]),o($Vm,[2,27]),o($Vm,[2,28]),o($Vm,[2,29]),o($Vm,[2,30]),o($Vm,[2,31]),o($Vm,[2,38]),o($Vm,[2,39]),{37:58,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},{49:[1,64]},{49:[1,65]},{35:[1,68],41:69,53:[1,66],87:[1,67]},{40:[1,70]},{40:[1,71]},{35:[1,72]},{40:[1,73]},{2:$V0,4:74,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{35:[1,75]},{35:[1,76]},{35:[1,77]},{35:[1,78]},{46:[1,79],47:$Vs,92:[1,80]},{40:[1,82],94:[1,83]},{49:[1,84]},{49:[1,85]},{49:[1,86]},{49:[1,87]},{49:[1,88]},{49:[1,89]},{46:[1,90]},{1:[2,1]},o($Vm,[2,2]),{50:[1,91]},o($Vt,[2,88]),o($Vt,[2,89]),o($Vt,[2,90]),o($Vt,[2,91]),o($Vt,[2,92]),{40:[1,92]},{40:[1,93]},{49:[1,94]},{35:[1,95]},{36:[1,96],47:$Vs},{36:[1,97]},{56:[1,98]},{40:$Vu,62:99,64:100},{46:[1,102]},{65:[1,103]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,76:[1,104],80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{37:105,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},{2:$V0,4:107,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,81:[1,106],84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{49:[1,108],92:[1,109]},{49:[1,110]},{40:[1,112],90:[1,111]},{35:[1,113]},{35:[1,114]},o($Vm,[2,80]),{40:[1,115]},{40:[1,116]},{40:[1,117]},{40:[1,118]},{40:[1,119]},{40:[1,120]},{40:[1,121]},{40:$Vv,43:122},{40:[1,124]},{50:[1,125]},{50:[1,126]},{40:[1,127]},{35:[1,128]},{37:129,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},{37:130,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},{2:$V0,4:131,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{40:$Vu,63:[1,132],64:133},o($Vw,[2,55]),{65:[1,134]},{40:[1,135]},{2:$V0,4:136,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{40:[1,137]},{2:$V0,4:139,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,81:[1,138],84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{49:[1,140]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,85:[1,141],86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{40:$Vv,43:142,50:[1,143]},{35:[1,144]},{35:$Vx,88:145,89:146},{35:[1,148]},o($Vm,[2,40]),o($Vm,[2,77]),o($Vy,$Vz,{48:149,47:$VA}),o($Vm,[2,81]),{50:[1,151]},{50:[1,152]},{50:[1,153]},{50:[1,154]},{50:[1,155]},{50:[1,156]},o($Vm,[2,41],{47:$VB}),o($VC,[2,124]),o($Vm,[2,45]),o($Vm,[2,46]),o($Vm,[2,47]),{47:[1,158]},{46:[1,159]},o($Vm,[2,34],{38:160,39:[1,161]}),o($Vm,[2,37],{42:162,39:[1,163]}),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,57:[1,164],58:165,59:$VD,60:$VE,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},o($Vm,[2,53]),o($Vw,[2,54]),{66:[1,168]},{69:[1,169]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,74:[1,170],75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},o($Vm,[2,60]),{49:[1,171]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,83:[1,172],84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{35:$VF,82:173},o($Vm,[2,67]),{47:$VB,50:[1,175]},o($Vm,[2,69]),{49:[1,176]},{35:$Vx,50:[1,177],89:178},o($VG,[2,72]),{37:179,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},{2:$V0,4:180,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,81:[1,181],84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},o($Vy,[2,42]),{35:[1,182]},o($Vm,[2,82]),o($Vm,[2,83]),o($Vm,[2,84]),o($Vm,[2,85]),o($Vm,[2,86]),o($Vm,[2,87]),{40:[1,183]},{37:184,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},{35:[1,185]},o($Vm,[2,32]),{40:[1,186]},o($Vm,[2,35]),{40:$Vv,43:187},o($Vm,[2,49]),o($Vm,[2,50]),{2:$V0,4:188,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{2:$V0,4:189,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{40:[1,190]},{40:[1,191]},o($Vm,[2,59]),{35:$VF,82:192},o($Vm,[2,65]),{47:$VH,50:[1,193]},{37:195,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},o($Vm,[2,68]),{50:[1,196],54:197,130:$VI},o($Vm,[2,70]),o($VG,[2,71]),o($VG,[2,73]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,91:[1,199],93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{49:[1,200]},o($Vy,$Vz,{48:201,47:$VA}),o($VC,[2,123]),{50:[1,202]},{49:[1,203]},o($Vm,[2,33]),o($Vm,[2,36],{47:$VB}),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,57:[1,204],61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,58:205,59:$VD,60:$VE,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{56:[1,206]},{70:[1,207],72:[1,208]},{47:$VH,50:[1,209]},{2:$V0,4:210,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{35:[1,211]},o($VJ,[2,122]),o($Vm,[2,78]),{47:$VK,50:[1,212]},{40:[1,214]},o($Vm,[2,74]),{35:$VF,82:215},o($Vy,[2,43]),{35:[1,216]},{54:217,130:$VI},o($Vm,[2,51]),o($Vm,[2,52]),{2:$V0,4:218,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{35:[1,219]},{35:[1,220]},{2:$V0,4:221,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,85:[1,222],86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{37:223,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr},o($Vm,[2,79]),{130:[1,224]},{131:[1,225]},{47:$VH,50:[1,226]},{46:[1,227]},{47:$VK,50:[1,228]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,67:229,68:$V8,73:$V9,75:$Va,77:[1,230],78:[1,231],79:[1,232],80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{65:[1,233]},{65:[1,234]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,83:[1,235],84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},o($Vm,[2,66]),o($VJ,[2,121]),{40:[1,236]},o($VJ,[2,120]),{2:$V0,4:237,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{49:[1,238]},o($Vm,[2,76]),o($Vw,[2,56]),o($Vw,[2,61]),o($Vw,[2,62]),o($Vw,[2,63]),{2:$V0,4:239,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{2:$V0,4:240,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},o($Vm,[2,64]),{131:[1,241]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,73:$V9,75:$Va,80:$Vb,84:$Vc,85:[1,242],86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{54:243,130:$VI},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,71:[1,244],73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:30,33:31,34:$V1,35:$V2,41:55,44:32,45:33,49:$V3,51:$V4,52:$V5,55:$V6,61:$V7,68:$V8,71:[1,245],73:$V9,75:$Va,80:$Vb,84:$Vc,86:$Vd,87:$Ve,93:$Vf,95:$Vg,96:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl},o($VJ,[2,119]),o($Vm,[2,75]),{47:$VK,50:[1,246]},o($Vm,[2,57]),o($Vm,[2,58]),o($Vm,[2,48])],
defaultActions: {56:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

// Aquí se incluyen las acciones semánticas de JavaScript necesarias.

//variables para la cadena:
    let cadena="";
    let caracter ="";

    //Aca tambien puedo agregar codigo en javascript

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://para ignorar espacios en blanco
break;
case 1://comentario en linea
break;
case 2://comentario de varias lineas
break;
case 3:return 101;
break;
case 4:return 102;
break;
case 5:return 103;
break;
case 6:return 104;
break;
case 7:return 105;
break;
case 8:return 46;
break;
case 9:return 130;
break;
case 10:return 131;
break;
case 11:return 'COMILLAS';
break;
case 12:return 49;
break;
case 13:return 50;
break;
case 14:return 'DOSPUNTOS';
break;
case 15:return 47;
break;
case 16:return '++';
break;
case 17:return '--';
break;
case 18:return 92;
break;
case 19:return 129;
break;
case 20:return 128;
break;
case 21:return 110;
break;
case 22:return 111;
break;
case 23:return 113;
break;
case 24:return 112;
break;
case 25:return 117;
break;
case 26:return 121;
break;
case 27:return 118;
break;
case 28:return 119;
break;
case 29:return 120;
break;
case 30:return 116;
break;
case 31:return 114;
break;
case 32:return 115;
break;
case 33:return 123;
break;
case 34:return 109;
break;
case 35:return 108;
break;
case 36:return 34;
break;
case 37:return 36;
break;
case 38:return 39;
break;
case 39:return 55;
break;
case 40:return 56;
break;
case 41:return 57;
break;
case 42:return 59;
break;
case 43:return 60;
break;
case 44:return 61;
break;
case 45:return 65;
break;
case 46:return 66;
break;
case 47:return 77;
break;
case 48:return 63;
break;
case 49:return 'DE_LO_CONTRARIO_ENTONCES';
break;
case 50:return 68;
break;
case 51:return 69;
break;
case 52:return 70;
break;
case 53:return 72;
break;
case 54:return 71;
break;
case 55:return 73;
break;
case 56:return 74;
break;
case 57:return 75;
break;
case 58:return 76;
break;
case 59:return 77;
break;
case 60:return 78;
break;
case 61:return 79;
break;
case 62:return 80;
break;
case 63:return 83;
break;
case 64:return 81;
break;
case 65:return 84;
break;
case 66:return 85;
break;
case 67:return 86;
break;
case 68:return 87;
break;
case 69:return 90;
break;
case 70:return 91;
break;
case 71:return 93;
break;
case 72:return 95;
break;
case 73:return 96;
break;
case 74:return 97;
break;
case 75:return 98;
break;
case 76:return 99;
break;
case 77:return 100;
break;
case 78:return 51;
break;
case 79:return 52;
break;
case 80:return 53;
break;
case 81:return 94;
break;
case 82:return "DECIMAL_VALOR";
break;
case 83:return "ENTERO_VALOR";
break;
case 84: cadena=""; this.begin("stringss"); 
break;
case 85: cadena+=yy_.yytext; 
break;
case 86: cadena+="\""; 
break;
case 87: cadena+="\n"; 
break;
case 88: cadena+=" ";  
break;
case 89: cadena+="\t"; 
break;
case 90: cadena+="\\"; 
break;
case 91: cadena+="\'"; 
break;
case 92: yy_.yytext=cadena; this.popState(); return 126; 
break;
case 93: caracter=""; this.begin("caracter"); 
break;
case 94: caracter=yy_.yytext; 
break;
case 95: caracter="\""; 
break;
case 96: caracter="\n"; 
break;
case 97: caracter=" ";  
break;
case 98: caracter="\t"; 
break;
case 99: caracter="\\"; 
break;
case 100: caracter="\'"; 
break;
case 101: yy_.yytext=caracter; this.popState(); return 127; 
break;
case 102:return "IDENTIFICADOR";
break;
case 103:
break;
case 104: console.log("Error lexico: "+yy_.yytext);
break;
case 105:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:boolean\b)/,/^(?:cadena\b)/,/^(?:->)/,/^(?:‘)/,/^(?:’)/,/^(?:")/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\.)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:-)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:si\b)/,/^(?:entonces\b)/,/^(?:fin si\b)/,/^(?:de lo contrario\b)/,/^(?:o si\b)/,/^(?:segun\b)/,/^(?:hacer\b)/,/^(?:en caso de ser\b)/,/^(?:detener\b)/,/^(?:fin segun\b)/,/^(?:de lo contrario entonces\b)/,/^(?:para\b)/,/^(?:hasta\b)/,/^(?:con incremento\b)/,/^(?:con decremento\b)/,/^(?:fin para\b)/,/^(?:mientras\b)/,/^(?:fin mientras\b)/,/^(?:repetir\b)/,/^(?:hasta que\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:retonar\b)/,/^(?:funcion\b)/,/^(?:fin funcion\b)/,/^(?:con parametros\b)/,/^(?:procedimiento\b)/,/^(?:fin procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:objeto\b)/,/^(?:metodo\b)/,/^(?:fin metodo\b)/,/^(?:imprimir\b)/,/^(?:minuscula\b)/,/^(?:mayuscula\b)/,/^(?:longitud\b)/,/^(?:truncar\b)/,/^(?:redondear\b)/,/^(?:tipo\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:Lista\b)/,/^(?:nl\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:["])/,/^(?:['])/,/^(?:[^'\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:['])/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[\ \r\t\f\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"caracter":{"rules":[94,95,96,97,98,99,100,101],"inclusive":false},"stringss":{"rules":[85,86,87,88,89,90,91,92],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,93,102,103,104,105],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}