/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,33],$V1=[1,34],$V2=[1,35],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,48],$Vf=[1,49],$Vg=[1,50],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[2,5,36,37,46,48,49,63,65,67,68,69,71,72,74,76,79,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108],$Vq=[2,5,36,37,45,46,48,49,63,65,67,68,69,71,72,74,76,79,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108],$Vr=[1,61],$Vs=[2,41],$Vt=[1,70],$Vu=[1,72],$Vv=[1,90],$Vw=[1,91],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,112],$VM=[2,5,36,37,46,48,49,52,55,63,65,67,68,69,71,72,74,76,79,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108],$VN=[1,130],$VO=[2,5,36,37,40,45,46,47,48,49,63,65,67,68,69,71,72,74,76,79,81,82,83,84,85,86,87,88,89,91,92,93,94,95,99,101,103,104,105,106,107,108],$VP=[45,47],$VQ=[1,140],$VR=[1,131],$VS=[1,132],$VT=[1,133],$VU=[1,134],$VV=[1,135],$VW=[1,136],$VX=[1,137],$VY=[1,138],$VZ=[1,139],$V_=[1,141],$V$=[1,142],$V01=[1,143],$V11=[1,144],$V21=[2,5,36,37,45,46,47,48,49,54,63,64,65,67,68,69,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108,115,117,118,119,120,121,122,123,124,125,126,127,128,129],$V31=[1,153],$V41=[1,176],$V51=[2,5,36,37,45,46,47,48,49,63,65,67,68,69,71,72,74,76,79,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108],$V61=[2,5,36,37,45,46,47,48,49,54,63,64,65,67,68,69,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108,117,118],$V71=[71,74],$V81=[1,212],$V91=[2,5,36,37,45,46,47,48,49,54,63,64,65,67,68,69,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108,117,118,119,120,121,122,123,124],$Va1=[2,5,36,37,45,46,47,48,49,54,63,64,65,67,68,69,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108,115,117,118,119,120,121,122,123,124,125],$Vb1=[2,5,36,37,45,46,47,48,49,54,63,64,65,67,68,69,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108,115,117,118,119,120,121,122,123,124,125,126,127,128],$Vc1=[1,227],$Vd1=[1,228],$Ve1=[1,236],$Vf1=[37,47],$Vg1=[1,254];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaraciones":7,"asignacion":8,"casteo":9,"incrementar":10,"decrementar":11,"lista_para_listas_ud":12,"lista_para_listas_bd":13,"lista_para_listas_td":14,"acceso_a_listas":15,"condicion_si":16,"seleccion_multiple":17,"ciclo_para":18,"ciclo_mientras":19,"ciclo_repetir_hasta":20,"sentencias_de_transferencia":21,"funciones":22,"procedimientos":23,"llamada_funcion":24,"objetos":25,"metodo_objeto":26,"instanciacion_objetos":27,"objetos_accesos_metodos":28,"impresion":29,"hacer_minuscula":30,"hacer_mayuscula":31,"hacer_longitud":32,"hacer_truncar":33,"hacer_redondear":34,"averiguar_tipo":35,"INGRESAR":36,"IDENTIFICADOR":37,"COMO":38,"tipo_dato":39,"CON_VALOR":40,"expresion":41,"identificadores_multiples":42,"lista_expresiones":43,"ARROW":44,"COMA":45,"PARENTESIS_ABRIR":46,"PARENTESIS_CERRAR":47,"INCREMENTO":48,"DECREMENTO":49,"lista_ud":50,"LISTA":51,"CORCHIN":52,"EXPRE":53,"CORCHFIN":54,"=":55,"lista_bd":56,"AL":57,"lista_td":58,"lista_valores":59,"indices_de_listas":60,"modificar_lista":61,"indice_lista":62,"SI":63,"ENTONCES":64,"FIN_SI":65,"fin_condicion_si":66,"DE_LO_CONTRARIO":67,"O_SI":68,"SEGUN":69,"opciones":70,"DE_LO_CONTRARIO_ENTONCES":71,"FIN_SEGUN":72,"seleccion":73,"HACER":74,"EN_CASO_DE_SER":75,"PARA":76,"HASTA":77,"CON_INCREMENTO":78,"FIN_PARA":79,"CON_DECREMENTO":80,"MIENTRAS":81,"FIN_MIENTRAS":82,"REPETIR":83,"HASTA_QUE":84,"DETENER":85,"CONTINUAR":86,"RETORNAR":87,"FUNCION":88,"CON_PARAMETROS":89,"lista_parametros":90,"FIN_FUNCION":91,"PROCEDIMIENTO":92,"FIN_PROCEDIMIENTO":93,"EJECUTAR":94,"OBJETO":95,"atributos":96,"atributo":97,"METODO":98,"FIN_METODO":99,"PUNTO":100,"IMPRIMIR":101,"NUEVALINEA":102,"MINUSCULA":103,"MAYUSCULA":104,"LONGITUD":105,"TRUNCAR":106,"REDONDEAR":107,"TIPO":108,"ENTERO":109,"DECIMAL":110,"CARACTER":111,"BOOLEANO":112,"CADENA":113,"NULL":114,"-":115,"!":116,"||":117,"&&":118,"==":119,"!=":120,">=":121,"<=":122,"<":123,">":124,"+":125,"*":126,"/":127,"%":128,"^":129,"ENTERO_VALOR":130,"DECIMAL_VALOR":131,"CADENAS_VALOR":132,"CARACTER_VALOR":133,"TRUE":134,"FALSE":135,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",36:"INGRESAR",37:"IDENTIFICADOR",38:"COMO",40:"CON_VALOR",44:"ARROW",45:"COMA",46:"PARENTESIS_ABRIR",47:"PARENTESIS_CERRAR",48:"INCREMENTO",49:"DECREMENTO",51:"LISTA",52:"CORCHIN",53:"EXPRE",54:"CORCHFIN",55:"=",57:"AL",63:"SI",64:"ENTONCES",65:"FIN_SI",67:"DE_LO_CONTRARIO",68:"O_SI",69:"SEGUN",71:"DE_LO_CONTRARIO_ENTONCES",72:"FIN_SEGUN",74:"HACER",75:"EN_CASO_DE_SER",76:"PARA",77:"HASTA",78:"CON_INCREMENTO",79:"FIN_PARA",80:"CON_DECREMENTO",81:"MIENTRAS",82:"FIN_MIENTRAS",83:"REPETIR",84:"HASTA_QUE",85:"DETENER",86:"CONTINUAR",87:"RETORNAR",88:"FUNCION",89:"CON_PARAMETROS",91:"FIN_FUNCION",92:"PROCEDIMIENTO",93:"FIN_PROCEDIMIENTO",94:"EJECUTAR",95:"OBJETO",98:"METODO",99:"FIN_METODO",100:"PUNTO",101:"IMPRIMIR",102:"NUEVALINEA",103:"MINUSCULA",104:"MAYUSCULA",105:"LONGITUD",106:"TRUNCAR",107:"REDONDEAR",108:"TIPO",109:"ENTERO",110:"DECIMAL",111:"CARACTER",112:"BOOLEANO",113:"CADENA",114:"NULL",115:"-",116:"!",117:"||",118:"&&",119:"==",120:"!=",121:">=",122:"<=",123:"<",124:">",125:"+",126:"*",127:"/",128:"%",129:"^",130:"ENTERO_VALOR",131:"DECIMAL_VALOR",132:"CADENAS_VALOR",133:"CARACTER_VALOR",134:"TRUE",135:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[7,4],[7,4],[7,6],[8,3],[8,3],[42,3],[42,1],[9,4],[10,4],[11,4],[50,10],[50,6],[56,10],[56,7],[58,10],[58,6],[12,3],[13,3],[13,1],[14,3],[14,1],[15,3],[60,2],[60,1],[62,3],[61,2],[61,0],[16,5],[16,5],[66,3],[66,3],[17,6],[70,2],[70,1],[73,5],[18,11],[18,11],[19,5],[20,4],[21,1],[21,1],[21,1],[22,9],[22,5],[23,8],[23,4],[24,5],[24,4],[25,5],[96,2],[96,1],[97,2],[26,6],[26,10],[27,9],[28,3],[28,6],[28,7],[29,2],[29,3],[30,4],[31,4],[32,4],[33,4],[34,4],[35,4],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[41,2],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,3],[59,3],[59,1],[90,4],[90,2],[43,3],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 if($$[$0] != false) $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 3:
 this.$ = ($$[$0]!= false) ? [$$[$0]] : []
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32:
this.$ = $$[$0];
break;
case 117:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]) 
break;
case 123:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 124:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 125:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 126:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 127: case 128:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.BOOLEANO), $$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 130:
 this.$ = $$[$0-1] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{1:[3]},{2:$V0,5:[1,59],6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vq,[2,9]),o($Vp,[2,10],{45:$Vr}),o($Vp,[2,11],{45:[1,62]}),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),o($Vp,[2,19]),o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),o($Vp,[2,25]),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),o($Vp,[2,29]),o($Vp,[2,30]),o($Vp,[2,31]),o($Vp,[2,32]),o($Vp,[2,33]),{37:[1,63],42:64,95:[1,65]},{44:[1,66],45:$Vs,52:$Vt,60:67,62:69,100:[1,68]},{44:[1,71],45:$Vu},{37:$Vv,39:73,41:81,46:$Vw,59:74,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{46:[1,92]},{46:[1,93]},{37:$Vv,41:94,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:95,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:[1,96]},{37:$Vv,41:97,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{2:$V0,4:98,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,74]),o($Vp,[2,75]),o($Vp,[2,76]),{37:[1,99]},{37:[1,100]},{37:[1,101]},{37:[1,102]},{37:$Vv,41:103,46:$Vw,102:[1,104],115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{46:[1,105]},{46:[1,106]},{46:[1,107]},{46:[1,108]},{46:[1,109]},{46:[1,110]},{1:[2,1]},o($Vp,[2,2]),{12:111,46:$VL},{12:114,13:113,46:$VL},{38:[1,115],45:$Vs},{38:[1,116],45:$Vu},{37:[1,117]},{37:$Vv,41:118,46:$Vw,98:[1,119],115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vp,[2,61],{61:120,62:121,52:$Vt,55:[1,122]}),{37:[1,123]},o($VM,[2,58]),{37:$Vv,41:124,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:126,43:125,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:[1,127]},{47:[1,128]},{45:$VN,47:[1,129]},o($VO,[2,101]),o($VO,[2,102]),o($VO,[2,103]),o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,106]),o($VP,[2,132],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),{37:$Vv,41:145,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:146,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($V21,[2,123]),o($V21,[2,124]),o($V21,[2,125]),o($V21,[2,126]),o($V21,[2,127]),o($V21,[2,128]),o($V21,[2,129]),{37:$Vv,41:147,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:148,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:149,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{64:[1,150],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{70:151,73:152,74:$V31,115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{44:[1,154]},{74:[1,155],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,84:[1,156],85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{39:157,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC},{2:$V0,4:159,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,89:[1,158],92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{46:[1,160],100:[1,161]},{46:[1,162]},o($Vp,[2,93],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),{37:$Vv,41:163,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:164,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:165,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:166,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:167,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:168,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:169,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vq,[2,52]),{37:$Vv,41:81,46:$Vw,59:74,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vp,[2,54],{45:$Vr}),o($Vq,[2,53]),{39:170,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC},{39:171,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC},{37:[1,172]},o($Vp,[2,38],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),{37:[1,173]},o($Vp,[2,56]),o($VM,[2,57]),{37:$Vv,41:174,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vp,[2,90]),{54:[1,175],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},o($Vp,[2,39],{45:$V41}),o($V51,[2,136],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o([38,44,45],[2,40]),{37:$Vv,41:177,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vq,[2,51]),{37:$Vv,41:178,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:179,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:180,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:181,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:182,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:183,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:184,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:185,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:186,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:187,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:188,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:189,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:190,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:191,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:192,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($V21,[2,107]),o($V61,[2,108],{115:$VQ,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),{47:[1,193],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{47:[1,194],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{47:[1,195],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{2:$V0,4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{71:[1,197],73:198,74:$V31},o($V71,[2,68]),{75:[1,199]},{37:$Vv,41:200,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{2:$V0,4:201,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{37:$Vv,41:202,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{2:$V0,4:204,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,89:[1,203],92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{46:[1,205]},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,93:[1,206],94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{37:$Vv,41:126,43:207,46:$Vw,47:[1,208],115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:[1,209]},{37:$V81,96:210,97:211},o($Vp,[2,94],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),{47:[1,213],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{47:[1,214],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{47:[1,215],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{47:[1,216],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{47:[1,217],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{47:[1,218],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},o($Vp,[2,35],{40:[1,219]}),o($Vp,[2,36],{40:[1,220]}),{44:[1,221]},{2:$V0,4:222,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,89:[1,223],92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,60],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($VM,[2,59]),{37:$Vv,41:224,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vp,[2,42],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($VP,[2,131],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o([2,5,36,37,45,46,47,48,49,54,63,64,65,67,68,69,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,103,104,105,106,107,108,117],[2,109],{115:$VQ,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($V61,[2,110],{115:$VQ,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($V91,[2,111],{115:$VQ,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($V91,[2,112],{115:$VQ,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($V91,[2,113],{115:$VQ,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($V91,[2,114],{115:$VQ,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($V91,[2,115],{115:$VQ,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($V91,[2,116],{115:$VQ,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($Va1,[2,117],{126:$V_,127:$V$,128:$V01,129:$V11}),o($Va1,[2,118],{126:$V_,127:$V$,128:$V01,129:$V11}),o($Vb1,[2,119],{129:$V11}),o($Vb1,[2,120],{129:$V11}),o($Vb1,[2,121],{129:$V11}),o($Vb1,[2,122],{129:$V11}),o($V21,[2,130]),o($Vp,[2,43]),o($Vp,[2,44]),{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,65:[1,225],66:226,67:$Vc1,68:$Vd1,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,4:229,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($V71,[2,67]),{37:$Vv,41:230,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{77:[1,231],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,82:[1,232],83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,73],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),{46:[1,233]},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,91:[1,234],92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{37:$Ve1,90:235},o($Vp,[2,80]),{45:$V41,47:[1,237]},o($Vp,[2,82]),{46:[1,238]},{37:$V81,47:[1,239],97:240},o($Vf1,[2,85]),{39:241,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC},o($Vp,[2,95]),o($Vp,[2,96]),o($Vp,[2,97]),o($Vp,[2,98]),o($Vp,[2,99]),o($Vp,[2,100]),{37:$Vv,41:242,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:$Vv,41:126,43:243,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{37:[1,244]},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,99:[1,245],101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{46:[1,246]},o($V51,[2,135],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($Vp,[2,62]),o($Vp,[2,63]),{2:$V0,4:247,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,4:248,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,72:[1,249],76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{64:[1,250],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{37:$Vv,41:251,46:$Vw,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vp,[2,72]),{37:$Ve1,90:252},o($Vp,[2,78]),{45:$Vg1,47:[1,253]},{39:255,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC},o($Vp,[2,81]),{37:$Vv,41:81,46:$Vw,47:[1,256],59:257,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},o($Vp,[2,83]),o($Vf1,[2,84]),o($Vf1,[2,86]),o($Vp,[2,34],{115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11}),o($Vp,[2,37],{45:$V41}),{46:[1,258]},o($Vp,[2,87]),{37:$Ve1,90:259},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,65:[1,260],69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,66:261,67:$Vc1,68:$Vd1,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,66]),{2:$V0,4:262,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{78:[1,263],80:[1,264],115:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$,128:$V01,129:$V11},{45:$Vg1,47:[1,265]},{2:$V0,4:266,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{37:[1,267]},o($VP,[2,134]),o($Vp,[2,91]),{45:$VN,47:[1,268]},{37:$Vv,41:81,46:$Vw,59:269,115:$VD,116:$VE,130:$VF,131:$VG,132:$VH,133:$VI,134:$VJ,135:$VK},{45:$Vg1,47:[1,270]},o($Vp,[2,64]),o($Vp,[2,65]),o($V71,[2,69],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,42:36,6:60,2:$V0,36:$V1,37:$V2,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo}),{37:[1,271]},{37:[1,272]},{2:$V0,4:273,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,93:[1,274],94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{39:275,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC},o($Vp,[2,92]),{45:$VN,47:[1,276]},{2:$V0,4:277,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{74:[1,278]},{74:[1,279]},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,91:[1,280],92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,79]),o($VP,[2,133]),o($Vp,[2,89]),{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,93:[1,281],94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,4:282,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,4:283,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,77]),o($Vp,[2,88]),{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,79:[1,284],81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},{2:$V0,6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:$V1,37:$V2,42:36,46:$V3,48:$V4,49:$V5,63:$V6,69:$V7,76:$V8,79:[1,285],81:$V9,83:$Va,85:$Vb,86:$Vc,87:$Vd,88:$Ve,92:$Vf,94:$Vg,95:$Vh,101:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo},o($Vp,[2,70]),o($Vp,[2,71])],
defaultActions: {59:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

// Aquí se incluyen las acciones semánticas de JavaScript necesarias.
const Aritmeticas = require('./expresiones/Aritmeticas')
const Nativo = require('./Expresiones/Nativo')
const Tipo = require('./Simbolo/Tipo')

//variables para la cadena:
    let cadena="";
    let caracter ="";

    //Aca tambien puedo agregar codigo en javascript

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://para ignorar espacios en blanco
break;
case 1://comentario en linea
break;
case 2://comentario de varias lineas
break;
case 3:return 109;
break;
case 4:return 110;
break;
case 5:return 111;
break;
case 6:return 112;
break;
case 7:return 113;
break;
case 8:return 114;
break;
case 9:return 44;
break;
case 10:return 'COMILLAS';
break;
case 11:return 46;
break;
case 12:return 47;
break;
case 13:return 45;
break;
case 14:return '++';
break;
case 15:return '--';
break;
case 16:return 100;
break;
case 17:return 135;
break;
case 18:return 134;
break;
case 19:return 119;
break;
case 20:return 120;
break;
case 21:return 122;
break;
case 22:return 121;
break;
case 23:return 115;
break;
case 24:return 129;
break;
case 25:return 126;
break;
case 26:return 127;
break;
case 27:return 128;
break;
case 28:return 125;
break;
case 29:return 123;
break;
case 30:return 124;
break;
case 31:return 116;
break;
case 32:return 118;
break;
case 33:return 117;
break;
case 34:return 52;
break;
case 35:return 54;
break;
case 36:return 36;
break;
case 37:return 38;
break;
case 38:return 40;
break;
case 39:return 63;
break;
case 40:return 64;
break;
case 41:return 65;
break;
case 42:return 67;
break;
case 43:return 68;
break;
case 44:return 69;
break;
case 45:return 74;
break;
case 46:return 75;
break;
case 47:return 85;
break;
case 48:return 72;
break;
case 49:return 71;
break;
case 50:return 76;
break;
case 51:return 77;
break;
case 52:return 78;
break;
case 53:return 80;
break;
case 54:return 79;
break;
case 55:return 81;
break;
case 56:return 82;
break;
case 57:return 83;
break;
case 58:return 84;
break;
case 59:return 85;
break;
case 60:return 86;
break;
case 61:return 87;
break;
case 62:return 88;
break;
case 63:return 91;
break;
case 64:return 89;
break;
case 65:return 92;
break;
case 66:return 93;
break;
case 67:return 94;
break;
case 68:return 95;
break;
case 69:return 98;
break;
case 70:return 99;
break;
case 71:return 101;
break;
case 72:return 103;
break;
case 73:return 104;
break;
case 74:return 105;
break;
case 75:return 106;
break;
case 76:return 107;
break;
case 77:return 108;
break;
case 78:return 48;
break;
case 79:return 49;
break;
case 80:return 51;
break;
case 81:return 102;
break;
case 82:return "DECIMAL_VALOR";
break;
case 83:return "ENTERO_VALOR";
break;
case 84: cadena=""; this.begin("stringss"); 
break;
case 85: cadena+=yy_.yytext; 
break;
case 86: cadena+="\""; 
break;
case 87: cadena+="\n"; 
break;
case 88: cadena+=" ";  
break;
case 89: cadena+="\t"; 
break;
case 90: cadena+="\\"; 
break;
case 91: cadena+="\'"; 
break;
case 92: yy_.yytext=cadena; this.popState(); return 132; 
break;
case 93: caracter=""; this.begin("caracter"); 
break;
case 94: caracter=yy_.yytext; 
break;
case 95: caracter="\""; 
break;
case 96: caracter="\n"; 
break;
case 97: caracter=" ";  
break;
case 98: caracter="\t"; 
break;
case 99: caracter="\\"; 
break;
case 100: caracter="\'"; 
break;
case 101: yy_.yytext=caracter; this.popState(); return 133; 
break;
case 102:return "IDENTIFICADOR";
break;
case 103:
break;
case 104: console.log("Error lexico: "+yy_.yytext);
break;
case 105:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:boolean\b)/,/^(?:cadena\b)/,/^(?:null\b)/,/^(?:->)/,/^(?:")/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\.)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:-)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\[)/,/^(?:\])/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:si\b)/,/^(?:entonces\b)/,/^(?:fin si\b)/,/^(?:de lo contrario\b)/,/^(?:o si\b)/,/^(?:segun\b)/,/^(?:hacer\b)/,/^(?:en caso de ser\b)/,/^(?:detener\b)/,/^(?:fin segun\b)/,/^(?:de lo contrario entonces\b)/,/^(?:para\b)/,/^(?:hasta\b)/,/^(?:con incremento\b)/,/^(?:con decremento\b)/,/^(?:fin para\b)/,/^(?:mientras\b)/,/^(?:fin mientras\b)/,/^(?:repetir\b)/,/^(?:hasta que\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:retonar\b)/,/^(?:funcion\b)/,/^(?:fin funcion\b)/,/^(?:con parametros\b)/,/^(?:procedimiento\b)/,/^(?:fin procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:objeto\b)/,/^(?:metodo\b)/,/^(?:fin metodo\b)/,/^(?:imprimir\b)/,/^(?:minuscula\b)/,/^(?:mayuscula\b)/,/^(?:longitud\b)/,/^(?:truncar\b)/,/^(?:redondear\b)/,/^(?:tipo\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:Lista\b)/,/^(?:nl\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:["])/,/^(?:['])/,/^(?:[^'\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:['])/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[\ \r\t\f\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"caracter":{"rules":[94,95,96,97,98,99,100,101],"inclusive":false},"stringss":{"rules":[85,86,87,88,89,90,91,92],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,93,102,103,104,105],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}