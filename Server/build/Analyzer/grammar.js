/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,30],$V2=[1,34],$V3=[1,32],$V4=[1,54],$V5=[1,55],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[2,5,32,40,45,46,50,51,65,68,69,70,71,74,78,79,80,83,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115],$Vq=[1,63],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[2,34],$Vx=[1,74],$Vy=[1,84],$Vz=[1,85],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[2,5,32,37,39,40,45,46,47,50,51,65,68,69,70,71,74,78,79,80,83,87,88,89,90,91,92,93,94,96,97,98,99,101,103,108,110,111,112,113,114,115],$VJ=[2,5,32,39,40,45,46,47,50,51,63,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115,121,123,124,125,126,127,128,129,130,131,132,133,134,135],$VK=[2,5,32,39,40,45,46,47,50,51,62,63,64,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115,121,123,124,125,126,127,128,129,130,131,132,133,134,135],$VL=[1,136],$VM=[1,127],$VN=[1,128],$VO=[1,129],$VP=[1,130],$VQ=[1,131],$VR=[1,132],$VS=[1,133],$VT=[1,134],$VU=[1,135],$VV=[1,137],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,143],$V_=[1,144],$V$=[1,152],$V01=[1,168],$V11=[2,5,32,39,40,45,46,47,50,51,65,68,69,70,71,74,78,79,80,83,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115],$V21=[2,146],$V31=[2,5,32,39,40,45,46,47,50,51,63,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115,123,124],$V41=[1,188],$V51=[1,194],$V61=[1,193],$V71=[96,98],$V81=[1,206],$V91=[2,5,32,39,40,45,46,47,50,51,63,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115],$Va1=[1,222],$Vb1=[1,223],$Vc1=[1,224],$Vd1=[2,5,32,39,40,45,46,47,50,51,63,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115,123,124,125,126,127,128,129,130],$Ve1=[2,5,32,39,40,45,46,47,50,51,63,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115,121,123,124,125,126,127,128,129,130,131],$Vf1=[2,5,32,39,40,45,46,47,50,51,63,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115,121,123,124,125,126,127,128,129,130,131,132,133,134],$Vg1=[74,78,79],$Vh1=[1,234],$Vi1=[40,47],$Vj1=[1,250],$Vk1=[39,47],$Vl1=[1,272],$Vm1=[1,300];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaraciones":7,"asignacion_o_metodo_objeto":8,"casteo":9,"incrementar_o_decrementar":10,"declaracion_listas":11,"acceso_a_listas":12,"condicion_si":13,"seleccion_multiple":14,"ciclo_para":15,"ciclo_mientras":16,"ciclo_repetir_hasta":17,"sentencias_de_transferencia":18,"funciones":19,"procedimientos":20,"llamada_funcion":21,"objetos":22,"instanciacion_objetos":23,"objetos_accesos_metodos":24,"impresion":25,"hacer_minuscula":26,"hacer_mayuscula":27,"hacer_longitud":28,"hacer_truncar":29,"hacer_redondear":30,"averiguar_tipo":31,"INGRESAR":32,"identificadores_multiples":33,"COMO":34,"tipo_dato":35,"con_valor_o_sin_valor":36,"CON_VALOR":37,"lista_expresiones":38,"COMA":39,"IDENTIFICADOR":40,"ARROW":41,"continuacion_arrow":42,"METODO":43,"fin_con_parametros_o_sin":44,"FIN_METODO":45,"PARENTESIS_ABRIR":46,"PARENTESIS_CERRAR":47,"expresion":48,"increment_or_decrement":49,"INCREMENTO":50,"DECREMENTO":51,"LISTA":52,"tipo_de_lista_para_listas":53,"lista_ud":54,"lista_bd_aux":55,"lista_td_aux":56,"lista_bd_contenido":57,"lista_td_contenido":58,"indices_de_listas":59,"modificar_lista":60,"indice_lista":61,"CORCHIN":62,"CORCHFIN":63,"IGUAL_SIMPLE":64,"SI":65,"ENTONCES":66,"continuacion_si":67,"FIN_SI":68,"DE_LO_CONTRARIO":69,"O_SI":70,"SEGUN":71,"HACER":72,"cases_con_default":73,"FIN_SEGUN":74,"cases_list":75,"default_case":76,"case_simple":77,"EN_CASO_DE_SER":78,"DE_LO_CONTRARIO_ENTONCES":79,"PARA":80,"HASTA":81,"incremento_decremento":82,"FIN_PARA":83,"CON_INCREMENTO":84,"aumentos":85,"CON_DECREMENTO":86,"MIENTRAS":87,"FIN_MIENTRAS":88,"REPETIR":89,"HASTA_QUE":90,"DETENER":91,"CONTINUAR":92,"RETORNAR":93,"FUNCION":94,"proce_o_func_con_parametros_o_sin":95,"FIN_FUNCION":96,"PROCEDIMIENTO":97,"FIN_PROCEDIMIENTO":98,"CON_PARAMETROS":99,"lista_parametros":100,"EJECUTAR":101,"lista_expresiones_o_no":102,"OBJETO":103,"atributos":104,"atributo":105,"PUNTO":106,"con_lista_o_sin":107,"IMPRIMIR":108,"NUEVALINEA":109,"MINUSCULA":110,"MAYUSCULA":111,"LONGITUD":112,"TRUNCAR":113,"REDONDEAR":114,"TIPO":115,"ENTERO":116,"DECIMAL":117,"CARACTER":118,"BOOLEANO":119,"CADENA":120,"-":121,"!":122,"||":123,"&&":124,"==":125,"!=":126,">=":127,"<=":128,"MENOR":129,"MAYOR":130,"+":131,"*":132,"/":133,"%":134,"^":135,"ENTERO_VALOR":136,"DECIMAL_VALOR":137,"CADENAS_VALOR":138,"CARACTER_VALOR":139,"TRUE":140,"FALSE":141,"INCREMEENTO":142,"DECREMEENTO":143,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",32:"INGRESAR",34:"COMO",37:"CON_VALOR",39:"COMA",40:"IDENTIFICADOR",41:"ARROW",43:"METODO",45:"FIN_METODO",46:"PARENTESIS_ABRIR",47:"PARENTESIS_CERRAR",50:"INCREMENTO",51:"DECREMENTO",52:"LISTA",62:"CORCHIN",63:"CORCHFIN",64:"IGUAL_SIMPLE",65:"SI",66:"ENTONCES",68:"FIN_SI",69:"DE_LO_CONTRARIO",70:"O_SI",71:"SEGUN",72:"HACER",74:"FIN_SEGUN",78:"EN_CASO_DE_SER",79:"DE_LO_CONTRARIO_ENTONCES",80:"PARA",81:"HASTA",83:"FIN_PARA",84:"CON_INCREMENTO",86:"CON_DECREMENTO",87:"MIENTRAS",88:"FIN_MIENTRAS",89:"REPETIR",90:"HASTA_QUE",91:"DETENER",92:"CONTINUAR",93:"RETORNAR",94:"FUNCION",96:"FIN_FUNCION",97:"PROCEDIMIENTO",98:"FIN_PROCEDIMIENTO",99:"CON_PARAMETROS",101:"EJECUTAR",103:"OBJETO",106:"PUNTO",108:"IMPRIMIR",109:"NUEVALINEA",110:"MINUSCULA",111:"MAYUSCULA",112:"LONGITUD",113:"TRUNCAR",114:"REDONDEAR",115:"TIPO",116:"ENTERO",117:"DECIMAL",118:"CARACTER",119:"BOOLEANO",120:"CADENA",121:"-",122:"!",123:"||",124:"&&",125:"==",126:"!=",127:">=",128:"<=",129:"MENOR",130:"MAYOR",131:"+",132:"*",133:"/",134:"%",135:"^",136:"ENTERO_VALOR",137:"DECIMAL_VALOR",138:"CADENAS_VALOR",139:"CARACTER_VALOR",140:"TRUE",141:"FALSE",142:"INCREMEENTO",143:"DECREMEENTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[36,2],[36,0],[33,3],[33,1],[8,3],[42,4],[42,1],[9,4],[10,4],[49,1],[49,1],[11,10],[53,1],[53,1],[53,1],[54,3],[57,3],[57,1],[55,3],[58,3],[58,1],[56,3],[12,3],[59,2],[59,1],[61,3],[60,2],[60,0],[13,5],[67,1],[67,3],[67,5],[14,5],[73,2],[73,1],[73,1],[75,2],[75,1],[77,4],[76,2],[15,10],[82,2],[82,2],[16,5],[17,4],[18,1],[18,1],[18,1],[19,5],[20,4],[95,5],[95,1],[21,5],[102,1],[102,0],[22,5],[104,2],[104,1],[105,2],[44,1],[44,5],[23,9],[24,3],[24,7],[107,1],[107,0],[25,2],[25,3],[26,4],[27,4],[28,4],[29,4],[30,4],[31,4],[35,1],[35,1],[35,1],[35,1],[35,1],[48,2],[48,2],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[100,4],[100,2],[38,3],[38,1],[85,2],[85,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 if($$[$0] != false) $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 3:
 this.$ = ($$[$0]!= false) ? [$$[$0]] : []
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 31:
this.$ = $$[$0];
break;
case 30:

        if ($$[$0] == null || $$[$0] == false) {
            this.$ = new CreacionVariable.default($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3]);
        } else {
            if ($$[$0-3].length != $$[$0].length) {
                yyerror("Error: la cantidad de variables y valores no coincide (línea " + _$[$0-4].first_line + ")");
                this.$ = false;
            } else {
                this.$ = new Declaracion.default($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0]);
            }
        }
    
break;
case 32:
this.$ = false;
break;
case 33: case 145:
 this.$ = [...$$[$0-2], $$[$0]]; 
break;
case 34: case 146:
 this.$ = [$$[$0]]; 
break;
case 35:

        if ($$[$0].tipo === 'asignacion') {
            this.$ = new Asignacion.default($$[$0-2], $$[$0].valores, _$[$0-2].first_line, _$[$0-2].first_column);
        } else if ($$[$0].tipo === 'metodo') {
          // this.$ = new LlamadaMetodo.default($$[$0-2], $$[$0].nombreMetodo, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column);
        }

break;
case 36:
        this.$ = {
            tipo: 'metodo',
            nombreMetodo: $$[$0-2],
            instrucciones: $$[$0-1]
        };

break;
case 37:

        this.$ = {
            tipo: 'asignacion',
            valores: $$[$0]
        };

break;
case 38:
 this.$ = new Casteo.default($$[$0], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39:

    if (!$$[$0-1] || typeof $$[$0-1].interpretar !== "function") {
        return new Errores("Semántico", "La expresión dentro de inc/dec debe ser una variable válida", _$[$0-3].first_line, _$[$0-3].first_column);
    }

    // Aseguramos que sea un acceso directo a una variable, no una operación
    if (!$$[$0-1].id) {
        return new Errores("Semántico", "Solo se puede aplicar inc/dec a una variable directamente", _$[$0-3].first_line, _$[$0-3].first_column);
    }

    const id = $$[$0-1].id;
    const accion = $$[$0-3]; // ya es 'mas' o 'menos'
    this.$ = new IncrementoDecremento.default(id, _$[$0-3].first_line, _$[$0-3].first_column, accion);

break;
case 40:
 this.$ = "mas" 
break;
case 41:
 this.$ = "menos" 
break;
case 42:

    const contenidoLista = $$[$0].valor;
    const dimension = ($$[$0-6] instanceof Nativo.default) ? parseInt($$[$0-6].valor) : null;

    if (
        ($$[$0].tipo == 'unidimensional' && dimension !== 1) ||
        ($$[$0].tipo == 'bidimensional' && dimension !== 2) ||
        ($$[$0].tipo == 'tridimensional' && dimension !== 3)
    ) {
        console.log("Error de dimensiones: Se declaró (" + dimension + ") dimensiones, pero el tipo de lista es " + $$[$0].tipo);
        //this.$ = new Errores("Semántico", `Error de dimensiones: Se declaró (${dimension}) dimensiones, pero el tipo de lista es ${$$[$0].tipo}`, _$[$0-9].first_line, _$[$0-9].first_column);
    } else {
        switch ($$[$0].tipo) {
            case 'unidimensional':
                this.$ = new ListaUnidimensional.default($$[$0-2], $$[$0-4], contenidoLista, _$[$0-9].first_line, _$[$0-9].first_column);
                break;
            case 'bidimensional':
                this.$ = new ListaBidimensional.default($$[$0-2], $$[$0-4], contenidoLista, _$[$0-9].first_line, _$[$0-9].first_column);
                break;
            case 'tridimensional':
                this.$ = new ListaTridimensional.default($$[$0-2], $$[$0-4], contenidoLista, _$[$0-9].first_line, _$[$0-9].first_column);
                break;
        }
    }

break;
case 43:
       this.$ = {
            tipo: 'unidimensional',
            valor: $$[$0]
            }
;
break;
case 44:
       this.$ = {
            tipo: 'bidimensional',
            valor: $$[$0]
            }
;
break;
case 45:
       this.$ = {
            tipo: 'tridimensional',
            valor: $$[$0]
            }
;
break;
case 46: case 56:

    this.$ = $$[$0-1];

break;
case 47:

    this.$ = [...$$[$0-2], $$[$0]]; // agregamos otra fila (lista unidimensional) a las filas ya existentes

break;
case 48:

    this.$ = [$$[$0]]; // primera fila

break;
case 49:

    this.$ = $$[$0-1]; // simplemente pasamos el arreglo de filas

break;
case 50:

    this.$ = [...$$[$0-2], $$[$0]]; // agregamos otra "matriz" (otra lista de listas) a las existentes

break;
case 51:

    this.$ = [$$[$0]]; // primera "matriz" (una lista bidimensional)

break;
case 52:

    this.$ = $$[$0-1]; // pasamos arreglo de matrices

break;
case 53:

    if ($$[$0].tipo === 'sin_modificacion') {
        this.$ = new AccesoLista.default($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    } else {
        this.$ = new ModificarLista.default($$[$0-2], $$[$0-1], $$[$0].valor, _$[$0-2].first_line, _$[$0-2].first_column);
    }

break;
case 54:

    this.$ = [...$$[$0-1], $$[$0]]; // Acumulamos los índices

break;
case 55:

    this.$ = [$$[$0]]; // Primer índice

break;
case 57:

    this.$ = {
        tipo: 'modificacion',
        valor: $$[$0]
    };

break;
case 58:

    this.$ = {
        tipo: 'sin_modificacion',
        valor: null
    };

break;
case 59:

    this.$ = new Si.default($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0]?.condicion_else, $$[$0]?.instrucciones_else);

break;
case 60:
 this.$ = undefined; 
break;
case 61:
 this.$ = { instrucciones_else: $$[$0-1] }; 
break;
case 62:
 this.$ = { condicion_else: new Si.default($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0]?.condicion_else, $$[$0]?.instrucciones_else)};
break;
case 63:
 this.$ = new SeleccionMultiple.default($$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1].casos, $$[$0-1].defecto); 
break;
case 64:
 this.$ = { casos: $$[$0-1], defecto: $$[$0] }; 
break;
case 65:
 this.$ = { casos: $$[$0], defecto: undefined }; 
break;
case 66:
 this.$ = { casos: undefined, defecto: $$[$0] }; 
break;
case 67:
 if ($$[$0] != false) $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 68:
 this.$ = ($$[$0] != false) ? [$$[$0]] : []; 
break;
case 69:
 this.$ = new SeleccionCaso.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 70:
 this.$ = new Default.default($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 76:
 this.$ = new Detener.default(_$[$0].first_line, _$[$0].first_column)
break;
case 77:
 this.$ = new Continuar.default(_$[$0].first_line, _$[$0].first_column)
break;
case 78:
 this.$ = new Retornar.default(_$[$0].first_line, _$[$0].first_column)
break;
case 97:

        this.$ = new Imprimir.default($$[$0], _$[$0-1].first_line, _$[$0-1].first_column, "");
    
break;
case 98:

        this.$ = new Imprimir.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column, "\n");
    
break;
case 99:

    this.$ = new FuncionesNativas.default(FuncionesNativas.Operadores.LOWER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 100:

    this.$ = new FuncionesNativas.default(FuncionesNativas.Operadores.UPPER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 101:

    this.$ = new FuncionesNativas.default(FuncionesNativas.Operadores.LENGTH, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 102:

    this.$ = new FuncionesNativas.default(FuncionesNativas.Operadores.TRUNCAR, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 103:

    this.$ = new FuncionesNativas.default(FuncionesNativas.Operadores.ROUND, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 104:

    this.$ = new FuncionesNativas.default(FuncionesNativas.Operadores.TIPODATO, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 105:
 this.$ = new Tipo.default(Tipo.tipo_dato.ENTERO)
break;
case 106:
 this.$ = new Tipo.default(Tipo.tipo_dato.DECIMAL)
break;
case 107:
 this.$ = new Tipo.default(Tipo.tipo_dato.CARACTER)
break;
case 108:
 this.$ = new Tipo.default(Tipo.tipo_dato.BOOLEANO)
break;
case 109:
 this.$ = new Tipo.default(Tipo.tipo_dato.CADENA)
break;
case 110:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]) 
break;
case 111:
 this.$ = new Logicas.default(Logicas.Logico.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$01])
break;
case 112:
 this.$ = new Logicas.default(Logicas.Logico.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 113:
 this.$ = new Logicas.default(Logicas.Logico.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 114:
 this.$ = new Relacionales.default(Relacionales.Relacional.IGUAL, $$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 115:
 this.$ = new Relacionales.default(Relacionales.Relacional.DIF, $$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 116:
 this.$ = new Relacionales.default(Relacionales.Relacional.MAYORI, $$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 117:
 this.$ = new Relacionales.default(Relacionales.Relacional.MENORI, $$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 118:
 this.$ = new Relacionales.default(Relacionales.Relacional.MENOR, $$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 119:
 this.$ = new Relacionales.default(Relacionales.Relacional.MAYOR, $$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 120:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 121:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 122:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MUL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 123:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIV, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 124:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MOD, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 125:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POW, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 126:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 127:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 128:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 129:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 130: case 131:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.BOOLEANO), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 132:
 this.$ = new AccesoVariable.default($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 133:
 this.$ = $$[$0-1] 
break;
case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142:
 this.$ = $$[$0] 
break;
case 147:

    this.$ = new IncrementoDecremento.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, "mas");

break;
case 148:

    this.$ = new IncrementoDecremento.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, "menos");
/*
            | IDENTIFICADOR expresion
{
    this.$ = new AsignacionAumento.default($$[$0-1], $$[$01], _$[$0-1].first_line, _$[$0-1].first_column);
}
*/

break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{1:[3]},{2:$V0,5:[1,56],6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),o($Vp,[2,19]),o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),o($Vp,[2,25]),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),o($Vp,[2,29]),{33:58,40:[1,61],52:[1,59],103:[1,60]},{39:$Vq,41:[1,62]},{35:64,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv},{46:[1,70]},o([39,41],$Vw,{59:71,61:73,62:$Vx,106:[1,72]}),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:75,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:95,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{40:[1,96]},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:97,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{2:$V0,4:98,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},o($Vp,[2,76]),o($Vp,[2,77]),o($Vp,[2,78]),{40:[1,99]},{40:[1,100]},{40:[1,101]},{40:[1,102]},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:103,85:87,109:[1,104],110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{46:[1,105]},{46:[1,106]},{46:[1,107]},{46:[1,108]},{46:[1,109]},{46:[1,110]},{46:[2,40]},{46:[2,41]},{1:[2,1]},o($Vp,[2,2]),{34:[1,111],39:$Vq},{46:[1,112]},{40:[1,113]},o([34,39],$Vw),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,38:116,40:$Vy,42:114,43:[1,115],46:$Vz,48:117,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{40:[1,118]},{47:[1,119]},o($VI,[2,105]),o($VI,[2,106]),o($VI,[2,107]),o($VI,[2,108]),o($VI,[2,109]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:120,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($VJ,[2,58],{60:121,61:122,62:$Vx,64:[1,123]}),{40:[1,124]},o($VK,[2,55]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:125,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{66:[1,126],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:141,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:142,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($VJ,[2,126]),o($VJ,[2,127]),o($VJ,[2,128]),o($VJ,[2,129]),o($VJ,[2,130]),o($VJ,[2,131]),o($VJ,[2,132],{59:71,61:73,62:$Vx,142:$VZ,143:$V_}),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,35:64,40:$Vy,46:$Vz,48:145,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($VJ,[2,134]),o($VJ,[2,135]),o($VJ,[2,136]),o($VJ,[2,137]),o($VJ,[2,138]),o($VJ,[2,139]),o($VJ,[2,140]),o($VJ,[2,141]),o($VJ,[2,142]),{72:[1,146],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{41:[1,147]},{72:[1,148],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,90:[1,149],91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{35:150,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv},{2:$V0,4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:151,97:$Vf,99:$V$,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{46:[1,154],106:[1,155]},{46:[1,156]},o($Vp,[2,97],{121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:157,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:158,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:159,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:160,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:161,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:162,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:163,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{35:164,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:165,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{40:[1,166]},o($Vp,[2,35]),{40:[1,167]},o($Vp,[2,37],{39:$V01}),o($V11,$V21,{121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o([34,39,41],[2,33]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:169,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{47:[1,170],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},o($VJ,[2,53]),o($VK,[2,54]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:171,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vp,[2,93]),{63:[1,172],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{2:$V0,4:173,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:174,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:175,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:176,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:177,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:178,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:179,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:180,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:181,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:182,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:183,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:184,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:185,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:186,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:187,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($VJ,[2,110]),o($V31,[2,111],{121:$VL,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($VJ,[2,147]),o($VJ,[2,148]),{47:$V41,121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{73:189,75:190,76:191,77:192,78:$V51,79:$V61},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:195,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{2:$V0,4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:197,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{2:$V0,4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:198,97:$Vf,99:$V$,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{98:[1,199]},{46:[1,200]},o($V71,[2,82],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,33:31,49:33,6:57,2:$V0,32:$V1,40:$V2,46:$V3,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo}),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,38:202,40:$Vy,46:$Vz,47:[2,85],48:117,85:87,102:201,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{40:[1,203]},{40:$V81,104:204,105:205},o($Vp,[2,98],{121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),{47:[1,207],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{47:[1,208],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{47:[1,209],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{47:[1,210],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{47:[1,211],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{47:[1,212],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},o($Vp,[2,32],{36:213,37:[1,214]}),{39:[1,215],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{41:[1,216]},{2:$V0,4:218,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,44:217,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,99:[1,219],101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:220,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($V91,[2,38],{121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vp,[2,39]),o($V91,[2,57],{121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($VK,[2,56]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,67:221,68:$Va1,69:$Vb1,70:$Vc1,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},o([2,5,32,39,40,45,46,47,50,51,63,65,66,68,69,70,71,72,74,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,103,108,110,111,112,113,114,115,123],[2,112],{121:$VL,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($V31,[2,113],{121:$VL,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vd1,[2,114],{121:$VL,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vd1,[2,115],{121:$VL,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vd1,[2,116],{121:$VL,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vd1,[2,117],{121:$VL,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vd1,[2,118],{121:$VL,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vd1,[2,119],{121:$VL,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Ve1,[2,120],{132:$VV,133:$VW,134:$VX,135:$VY}),o($Ve1,[2,121],{132:$VV,133:$VW,134:$VX,135:$VY}),o($Vf1,[2,122],{135:$VY}),o($Vf1,[2,123],{135:$VY}),o($Vf1,[2,124],{135:$VY}),o($Vf1,[2,125],{135:$VY}),o($VJ,[2,133]),{74:[1,225]},{74:[2,65],76:226,77:227,78:$V51,79:$V61},{74:[2,66]},o($Vg1,[2,68]),{2:$V0,4:228,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:229,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{81:[1,230],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,88:[1,231],89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},o($Vp,[2,75],{121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),{96:[1,232]},o($Vp,[2,80]),{40:$Vh1,100:233},{47:[1,235]},{39:$V01,47:[2,84]},{46:[1,236]},{40:$V81,47:[1,237],105:238},o($Vi1,[2,88]),{35:239,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv},o($VJ,[2,99]),o($VJ,[2,100]),o($VJ,[2,101]),o($VJ,[2,102]),o($VJ,[2,103]),o($VJ,[2,104]),o($Vp,[2,30]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,38:240,40:$Vy,46:$Vz,48:117,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{35:241,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv},{40:[1,242]},{45:[1,243]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,45:[2,90],46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{46:[1,244]},o($V11,[2,145],{121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY}),o($Vp,[2,59]),o($Vp,[2,60]),{2:$V0,4:245,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:246,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vp,[2,63]),{74:[2,64]},o($Vg1,[2,67]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,74:[2,70],80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{66:[1,247],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,40:$Vy,46:$Vz,48:248,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vp,[2,74]),o($Vp,[2,79]),{39:$Vj1,47:[1,249]},{35:251,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv},o($Vp,[2,83]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,38:253,40:$Vy,46:$Vz,47:[2,96],48:117,85:87,107:252,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vp,[2,86]),o($Vi1,[2,87]),o($Vi1,[2,89]),o($Vp,[2,31],{39:$V01}),{47:[1,254]},{46:[1,255]},o($Vp,[2,36]),{40:$Vh1,100:256},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,68:[1,257],71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{66:[1,258],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{2:$V0,4:259,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{82:260,84:[1,261],86:[1,262],121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{2:$V0,4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{40:[1,264]},o($Vk1,[2,144]),{47:[1,265]},{39:$V01,47:[2,95]},{40:[1,266]},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,38:267,40:$Vy,46:$Vz,48:117,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{39:$Vj1,47:[1,268]},o($Vp,[2,61]),{2:$V0,4:269,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},o($Vg1,[2,69],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,33:31,49:33,6:57,2:$V0,32:$V1,40:$V2,46:$V3,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo}),{72:[1,270]},{40:$Vl1,85:271},{40:$Vl1,85:273},o($V71,[2,81],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,33:31,49:33,6:57,2:$V0,32:$V1,40:$V2,46:$V3,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo}),{35:274,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv},o($Vp,[2,94]),{41:[1,275]},{39:$V01,47:[1,276]},{2:$V0,4:277,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,67:278,68:$Va1,69:$Vb1,70:$Vc1,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{2:$V0,4:279,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},{72:[2,72]},{142:$VZ,143:$V_},{72:[2,73]},o($Vk1,[2,143]),{46:[1,284],53:280,54:281,55:282,56:283},o($Vp,[2,92]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,45:[2,91],46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},o($Vp,[2,62]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:$V1,33:31,40:$V2,46:$V3,49:33,50:$V4,51:$V5,65:$V6,71:$V7,80:$V8,83:[1,285],87:$V9,89:$Va,91:$Vb,92:$Vc,93:$Vd,94:$Ve,97:$Vf,101:$Vg,103:$Vh,108:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo},o($Vp,[2,42]),o($Vp,[2,43]),o($Vp,[2,44]),o($Vp,[2,45]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,38:286,40:$Vy,46:[1,291],48:117,54:289,55:290,57:287,58:288,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vp,[2,71]),{39:$V01,47:[1,292]},{39:[1,294],47:[1,293]},{39:[1,296],47:[1,295]},o($Vk1,[2,48]),o($Vk1,[2,51]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,35:64,38:286,40:$Vy,46:[1,298],48:297,54:289,57:287,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($V11,[2,46]),o($V11,[2,49]),{46:$Vm1,54:299},o($Vp,[2,52]),{46:[1,302],55:301},{39:$V21,47:$V41,121:$VL,123:$VM,124:$VN,125:$VO,126:$VP,127:$VQ,128:$VR,129:$VS,130:$VT,131:$VU,132:$VV,133:$VW,134:$VX,135:$VY},{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,35:64,38:286,40:$Vy,46:$Vz,48:297,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vk1,[2,47]),{9:86,12:88,26:89,27:90,28:91,29:92,30:93,31:94,38:286,40:$Vy,46:$Vz,48:117,85:87,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$VA,122:$VB,136:$VC,137:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vk1,[2,50]),{46:$Vm1,54:289,57:287}],
defaultActions: {54:[2,40],55:[2,41],56:[2,1],191:[2,66],226:[2,64],271:[2,72],273:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

// Aquí se incluyen las acciones semánticas de JavaScript necesarias.
const Aritmeticas = require('./Expresiones/Aritmeticas')
const Nativo = require('./Expresiones/Nativo')
const AccesoLista = require('./Expresiones/AccesoLista')
const AccesoVariable = require('./Expresiones/AccesoVariable')
const ModificarLista = require('./Expresiones/ModificarLista')
const Relacionales = require('./Expresiones/Relacionales')
const FuncionesNativas = require('./Instrucciones/FuncionesNativas')
const Logicas = require('./Expresiones/Logicas')
//const Errores = require('../Errors/Errors')
const Si = require('./Instrucciones/Si')
const SeleccionCaso = require('./Instrucciones/Seleccion_caso')
const SeleccionMultiple = require('./Instrucciones/SeleccionMultiple')
const Default = require('./Instrucciones/SeleccionDefault')

const Tipo = require('./Simbolo/Tipo')

const CreacionVariable = require('./Instrucciones/CreacionVariable')
const Declaracion = require('./Instrucciones/Declaracion')
const Imprimir = require('./Instrucciones/Imprimir')
const Asignacion = require('./Instrucciones/AsignacionVariable')
const Casteo = require('./Instrucciones/Casteo')
const IncrementoDecremento = require('./Instrucciones/IncrementoDecremento')
const ListaUnidimensional = require('./Instrucciones/ListaUnidimensional')
const ListaBidimensional = require('./Instrucciones/ListaBidimensional')
const ListaTridimensional = require('./Instrucciones/ListaTridimensional')
const Retornar = require('./Instrucciones/Retornar')
const Detener = require('./Instrucciones/Detener')
const Continuar = require('./Instrucciones/Continuar')

//variables para la cadena:
    var cadenaa="";
    let caracter ="";

    //Aca tambien puedo agregar codigo en javascript

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://para ignorar espacios en blanco
break;
case 1://comentario en linea
break;
case 2://comentario de varias lineas
break;
case 3:return 116;
break;
case 4:return 117;
break;
case 5:return 118;
break;
case 6:return 119;
break;
case 7:return 120;
break;
case 8:return 'NULL';
break;
case 9:return 41;
break;
case 10:return 46;
break;
case 11:return 47;
break;
case 12:return 39;
break;
case 13:return 142;
break;
case 14:return 143;
break;
case 15:return 106;
break;
case 16:return 141;
break;
case 17:return 140;
break;
case 18:return 125;
break;
case 19:return 126;
break;
case 20:return 128;
break;
case 21:return 127;
break;
case 22:return 121;
break;
case 23:return 135;
break;
case 24:return 132;
break;
case 25:return 133;
break;
case 26:return 134;
break;
case 27:return 131;
break;
case 28:return 129;
break;
case 29:return 130;
break;
case 30:return 122;
break;
case 31:return 124;
break;
case 32:return 123;
break;
case 33:return 64;
break;
case 34:return 62;
break;
case 35:return 63;
break;
case 36:return 32;
break;
case 37:return 34;
break;
case 38:return 37;
break;
case 39:return 65;
break;
case 40:return 66;
break;
case 41:return 68;
break;
case 42:return 69;
break;
case 43:return 70;
break;
case 44:return 71;
break;
case 45:return 72;
break;
case 46:return 78;
break;
case 47:return 91;
break;
case 48:return 74;
break;
case 49:return 79;
break;
case 50:return 80;
break;
case 51:return 81;
break;
case 52:return 84;
break;
case 53:return 86;
break;
case 54:return 83;
break;
case 55:return 87;
break;
case 56:return 88;
break;
case 57:return 89;
break;
case 58:return 90;
break;
case 59:return 91;
break;
case 60:return 92;
break;
case 61:return 93;
break;
case 62:return 94;
break;
case 63:return 96;
break;
case 64:return 99;
break;
case 65:return 97;
break;
case 66:return 98;
break;
case 67:return 101;
break;
case 68:return 103;
break;
case 69:return 43;
break;
case 70:return 45;
break;
case 71:return 108;
break;
case 72:return 110;
break;
case 73:return 111;
break;
case 74:return 112;
break;
case 75:return 113;
break;
case 76:return 114;
break;
case 77:return 115;
break;
case 78:return 50;
break;
case 79:return 51;
break;
case 80:return 52;
break;
case 81:return 109;
break;
case 82:return "DECIMAL_VALOR";
break;
case 83:return "ENTERO_VALOR";
break;
case 84: cadenaa=""; this.begin("stringss"); 
break;
case 85: cadenaa+=yy_.yytext; 
break;
case 86: cadenaa+="\""; 
break;
case 87: cadenaa+="\n"; 
break;
case 88: cadenaa+=" ";  
break;
case 89: cadenaa+="\t"; 
break;
case 90: cadenaa+="\\"; 
break;
case 91: cadenaa+="\'"; 
break;
case 92: console.log("Agregando a cadena:", yy_.yytext); cadenaa+=yy_.yytext; 
break;
case 93: yy_.yytext=cadenaa; this.popState(); return 138; 
break;
case 94: caracter=""; this.begin("caracter"); 
break;
case 95: caracter=yy_.yytext; 
break;
case 96: caracter="\""; 
break;
case 97: caracter="\n"; 
break;
case 98: caracter=" ";  
break;
case 99: caracter="\t"; 
break;
case 100: caracter="\\"; 
break;
case 101: caracter="\'"; 
break;
case 102: yy_.yytext=caracter; this.popState(); return 139; 
break;
case 103:return "IDENTIFICADOR";
break;
case 104:
break;
case 105: console.log("Error lexico: "+yy_.yytext);
break;
case 106:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:boolean\b)/,/^(?:cadena\b)/,/^(?:null\b)/,/^(?:->)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\.)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:-)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:si\b)/,/^(?:entonces\b)/,/^(?:fin si\b)/,/^(?:de lo contrario\b)/,/^(?:o si\b)/,/^(?:segun\b)/,/^(?:hacer\b)/,/^(?:en caso de ser\b)/,/^(?:detener\b)/,/^(?:fin segun\b)/,/^(?:de lo contrario entonces\b)/,/^(?:para\b)/,/^(?:hasta\b)/,/^(?:con incremento\b)/,/^(?:con decremento\b)/,/^(?:fin para\b)/,/^(?:mientras\b)/,/^(?:fin mientras\b)/,/^(?:repetir\b)/,/^(?:hasta que\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:retornar\b)/,/^(?:funcion\b)/,/^(?:fin funcion\b)/,/^(?:con parametros\b)/,/^(?:procedimiento\b)/,/^(?:fin procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:objeto\b)/,/^(?:metodo\b)/,/^(?:fin metodo\b)/,/^(?:imprimir\b)/,/^(?:minuscula\b)/,/^(?:mayuscula\b)/,/^(?:longitud\b)/,/^(?:truncar\b)/,/^(?:redondear\b)/,/^(?:tipo\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:Lista\b)/,/^(?:nl\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:[^"\\]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:['])/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[\ \r\t\f\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"caracter":{"rules":[95,96,97,98,99,100,101,102],"inclusive":false},"stringss":{"rules":[85,86,87,88,89,90,91,92,93],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,103,104,105,106],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}