/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,28],$V2=[1,32],$V3=[1,30],$V4=[1,50],$V5=[1,51],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[2,5,30,38,43,46,50,51,65,69,70,71,72,75,76,78,79,82,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114],$Vo=[1,59],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[2,32],$Vv=[1,70],$Vw=[1,80],$Vx=[1,81],$Vy=[1,87],$Vz=[1,88],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[2,5,30,35,37,38,43,46,47,50,51,65,69,70,71,72,75,76,78,79,82,86,87,88,89,90,91,92,93,95,96,97,98,100,102,107,111,112,113,114],$VJ=[2,5,30,37,38,43,46,47,50,51,63,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,120,122,123,124,125,126,127,128,129,130,131,132,133,134],$VK=[2,5,30,37,38,43,46,47,50,51,62,63,64,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,120,122,123,124,125,126,127,128,129,130,131,132,133,134],$VL=[1,130],$VM=[1,121],$VN=[1,122],$VO=[1,123],$VP=[1,124],$VQ=[1,125],$VR=[1,126],$VS=[1,127],$VT=[1,128],$VU=[1,129],$VV=[1,131],$VW=[1,132],$VX=[1,133],$VY=[1,134],$VZ=[1,137],$V_=[1,138],$V$=[1,148],$V01=[1,162],$V11=[2,5,30,37,38,43,46,50,51,65,69,70,71,72,75,76,78,79,82,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,120,122,123,124,125,126,127,128,129,130,131,132,133,134],$V21=[2,5,30,37,38,43,46,47,50,51,65,69,70,71,72,75,76,78,79,82,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114],$V31=[2,139],$V41=[2,5,30,37,38,43,46,47,50,51,63,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,122,123],$V51=[1,182],$V61=[1,187],$V71=[95,97],$V81=[1,199],$V91=[2,5,30,37,38,43,46,47,50,51,63,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114],$Va1=[1,214],$Vb1=[1,215],$Vc1=[1,216],$Vd1=[2,5,30,37,38,43,46,47,50,51,63,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,122,123,124,125,126,127,128,129],$Ve1=[2,5,30,37,38,43,46,47,50,51,63,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,120,122,123,124,125,126,127,128,129,130],$Vf1=[2,5,30,37,38,43,46,47,50,51,63,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,120,122,123,124,125,126,127,128,129,130,131,132,133],$Vg1=[75,78],$Vh1=[1,226],$Vi1=[38,47],$Vj1=[1,243],$Vk1=[37,47],$Vl1=[1,265],$Vm1=[1,292];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaraciones":7,"asignacion_o_metodo_objeto":8,"casteo":9,"incrementar_o_decrementar":10,"declaracion_listas":11,"acceso_a_listas":12,"condicion_si":13,"seleccion_multiple":14,"ciclo_para":15,"ciclo_mientras":16,"ciclo_repetir_hasta":17,"sentencias_de_transferencia":18,"funciones":19,"procedimientos":20,"llamada_funcion":21,"objetos":22,"instanciacion_objetos":23,"objetos_accesos_metodos":24,"impresion":25,"hacer_longitud":26,"hacer_truncar":27,"hacer_redondear":28,"averiguar_tipo":29,"INGRESAR":30,"identificadores_multiples":31,"COMO":32,"tipo_dato":33,"con_valor_o_sin_valor":34,"CON_VALOR":35,"lista_expresiones":36,"COMA":37,"IDENTIFICADOR":38,"ARROW":39,"continuacion_arrow":40,"METODO":41,"fin_con_parametros_o_sin":42,"FIN_METODO":43,"hacer_minuscula":44,"hacer_mayuscula":45,"PARENTESIS_ABRIR":46,"PARENTESIS_CERRAR":47,"expresion":48,"increment_or_decrement":49,"INCREMENTO":50,"DECREMENTO":51,"LISTA":52,"tipo_de_lista_para_listas":53,"lista_ud":54,"lista_bd_aux":55,"lista_td_aux":56,"lista_bd_contenido":57,"lista_td_contenido":58,"indices_de_listas":59,"modificar_lista":60,"indice_lista":61,"CORCHIN":62,"CORCHFIN":63,"IGUAL_SIMPLE":64,"SI":65,"ENTONCES":66,"fin_o_condicion":67,"fin_condicion_si":68,"FIN_SI":69,"DE_LO_CONTRARIO":70,"O_SI":71,"SEGUN":72,"HACER":73,"opciones":74,"DE_LO_CONTRARIO_ENTONCES":75,"FIN_SEGUN":76,"seleccion":77,"EN_CASO_DE_SER":78,"PARA":79,"HASTA":80,"incremento_decremento":81,"FIN_PARA":82,"CON_INCREMENTO":83,"aumentos":84,"CON_DECREMENTO":85,"MIENTRAS":86,"FIN_MIENTRAS":87,"REPETIR":88,"HASTA_QUE":89,"DETENER":90,"CONTINUAR":91,"RETORNAR":92,"FUNCION":93,"proce_o_func_con_parametros_o_sin":94,"FIN_FUNCION":95,"PROCEDIMIENTO":96,"FIN_PROCEDIMIENTO":97,"CON_PARAMETROS":98,"lista_parametros":99,"EJECUTAR":100,"lista_expresiones_o_no":101,"OBJETO":102,"atributos":103,"atributo":104,"PUNTO":105,"con_lista_o_sin":106,"IMPRIMIR":107,"NUEVALINEA":108,"MINUSCULA":109,"MAYUSCULA":110,"LONGITUD":111,"TRUNCAR":112,"REDONDEAR":113,"TIPO":114,"ENTERO":115,"DECIMAL":116,"CARACTER":117,"BOOLEANO":118,"CADENA":119,"-":120,"!":121,"||":122,"&&":123,"==":124,"!=":125,">=":126,"<=":127,"<":128,">":129,"+":130,"*":131,"/":132,"%":133,"^":134,"ENTERO_VALOR":135,"DECIMAL_VALOR":136,"CADENAS_VALOR":137,"CARACTER_VALOR":138,"TRUE":139,"FALSE":140,"INCREMEENTO":141,"DECREMEENTO":142,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",30:"INGRESAR",32:"COMO",35:"CON_VALOR",37:"COMA",38:"IDENTIFICADOR",39:"ARROW",41:"METODO",43:"FIN_METODO",46:"PARENTESIS_ABRIR",47:"PARENTESIS_CERRAR",50:"INCREMENTO",51:"DECREMENTO",52:"LISTA",62:"CORCHIN",63:"CORCHFIN",64:"IGUAL_SIMPLE",65:"SI",66:"ENTONCES",69:"FIN_SI",70:"DE_LO_CONTRARIO",71:"O_SI",72:"SEGUN",73:"HACER",75:"DE_LO_CONTRARIO_ENTONCES",76:"FIN_SEGUN",78:"EN_CASO_DE_SER",79:"PARA",80:"HASTA",82:"FIN_PARA",83:"CON_INCREMENTO",85:"CON_DECREMENTO",86:"MIENTRAS",87:"FIN_MIENTRAS",88:"REPETIR",89:"HASTA_QUE",90:"DETENER",91:"CONTINUAR",92:"RETORNAR",93:"FUNCION",95:"FIN_FUNCION",96:"PROCEDIMIENTO",97:"FIN_PROCEDIMIENTO",98:"CON_PARAMETROS",100:"EJECUTAR",102:"OBJETO",105:"PUNTO",107:"IMPRIMIR",108:"NUEVALINEA",109:"MINUSCULA",110:"MAYUSCULA",111:"LONGITUD",112:"TRUNCAR",113:"REDONDEAR",114:"TIPO",115:"ENTERO",116:"DECIMAL",117:"CARACTER",118:"BOOLEANO",119:"CADENA",120:"-",121:"!",122:"||",123:"&&",124:"==",125:"!=",126:">=",127:"<=",128:"<",129:">",130:"+",131:"*",132:"/",133:"%",134:"^",135:"ENTERO_VALOR",136:"DECIMAL_VALOR",137:"CADENAS_VALOR",138:"CARACTER_VALOR",139:"TRUE",140:"FALSE",141:"INCREMEENTO",142:"DECREMEENTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[34,2],[34,0],[31,3],[31,1],[8,3],[40,4],[40,1],[40,1],[40,1],[9,4],[10,4],[49,1],[49,1],[11,10],[53,1],[53,1],[53,1],[54,3],[57,3],[57,1],[55,3],[58,3],[58,1],[56,3],[12,3],[59,2],[59,1],[61,3],[60,2],[60,0],[13,5],[67,1],[67,1],[68,3],[68,3],[14,7],[74,2],[74,1],[77,4],[15,10],[81,2],[81,2],[16,5],[17,4],[18,1],[18,1],[18,1],[19,5],[20,4],[94,5],[94,1],[21,5],[101,1],[101,0],[22,5],[103,2],[103,1],[104,2],[42,1],[42,5],[23,9],[24,3],[24,7],[106,1],[106,0],[25,2],[25,3],[44,4],[45,4],[26,4],[27,4],[28,4],[29,4],[33,1],[33,1],[33,1],[33,1],[33,1],[48,2],[48,2],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,3],[48,1],[48,1],[48,1],[48,1],[48,1],[99,4],[99,2],[36,3],[36,1],[84,2],[84,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 if($$[$0] != false) $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 3:
 this.$ = ($$[$0]!= false) ? [$$[$0]] : []
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 29:
this.$ = $$[$0];
break;
case 28:

        if ($$[$0] == null || $$[$0] == false) {
            this.$ = new CreacionVariable.default($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3]);
        } else {
            if ($$[$0-3].length != $$[$0].length) {
                yyerror("Error: la cantidad de variables y valores no coincide (línea " + _$[$0-4].first_line + ")");
                this.$ = false;
            } else {
                this.$ = new Declaracion.default($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0]);
            }
        }
    
break;
case 30:
this.$ = false;
break;
case 31: case 138:
 this.$ = [...$$[$0-2], $$[$0]]; 
break;
case 32: case 139:
 this.$ = [$$[$0]]; 
break;
case 33:

        if ($$[$0].tipo === 'asignacion') {
            this.$ = new Asignacion.default($$[$0-2], $$[$0].valores, _$[$0-2].first_line, _$[$0-2].first_column);
        } else if ($$[$0].tipo === 'metodo') {
          // this.$ = new LlamadaMetodo.default($$[$0-2], $$[$0].nombreMetodo, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column);
        }

break;
case 34:
        this.$ = {
            tipo: 'metodo',
            nombreMetodo: $$[$0-2],
            instrucciones: $$[$0-1]
        };

break;
case 35:

        this.$ = {
            tipo: 'asignacion',
            valores: $$[$0]
        };

break;
case 36:

    this.$ = {
        tipo: 'asignacion',
        valores: [$$[$0]] // OJO: debe ser arreglo porque Asignacion espera un arreglo de valores
    };

break;
case 37:

    this.$ = {
        tipo: 'asignacion',
        valores: [$$[$0]]
    };

break;
case 38:
 this.$ = new Casteo.default($$[$0], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39:

    if (!$$[$0-1] || typeof $$[$0-1].interpretar !== "function") {
        return new Errores("Semántico", "La expresión dentro de inc/dec debe ser una variable válida", _$[$0-3].first_line, _$[$0-3].first_column);
    }

    // Aseguramos que sea un acceso directo a una variable, no una operación
    if (!$$[$0-1].id) {
        return new Errores("Semántico", "Solo se puede aplicar inc/dec a una variable directamente", _$[$0-3].first_line, _$[$0-3].first_column);
    }

    const id = $$[$0-1].id;
    const accion = $$[$0-3]; // ya es 'mas' o 'menos'
    this.$ = new IncrementoDecremento.default(id, _$[$0-3].first_line, _$[$0-3].first_column, accion);

break;
case 40:
 this.$ = "mas" 
break;
case 41:
 this.$ = "menos" 
break;
case 42:

    const contenidoLista = $$[$0].valor;
    const dimension = ($$[$0-6] instanceof Nativo.default) ? parseInt($$[$0-6].valor) : null;

    if (
        ($$[$0].tipo == 'unidimensional' && dimension !== 1) ||
        ($$[$0].tipo == 'bidimensional' && dimension !== 2) ||
        ($$[$0].tipo == 'tridimensional' && dimension !== 3)
    ) {
        console.log("Error de dimensiones: Se declaró (" + dimension + ") dimensiones, pero el tipo de lista es " + $$[$0].tipo);
        //this.$ = new Errores("Semántico", `Error de dimensiones: Se declaró (${dimension}) dimensiones, pero el tipo de lista es ${$$[$0].tipo}`, _$[$0-9].first_line, _$[$0-9].first_column);
    } else {
        switch ($$[$0].tipo) {
            case 'unidimensional':
                this.$ = new ListaUnidimensional.default($$[$0-2], $$[$0-4], contenidoLista, _$[$0-9].first_line, _$[$0-9].first_column);
                break;
            case 'bidimensional':
                this.$ = new ListaBidimensional.default($$[$0-2], $$[$0-4], contenidoLista, _$[$0-9].first_line, _$[$0-9].first_column);
                break;
            case 'tridimensional':
                this.$ = new ListaTridimensional.default($$[$0-2], $$[$0-4], contenidoLista, _$[$0-9].first_line, _$[$0-9].first_column);
                break;
        }
    }

break;
case 43:
       this.$ = {
            tipo: 'unidimensional',
            valor: $$[$0]
            }
;
break;
case 44:
       this.$ = {
            tipo: 'bidimensional',
            valor: $$[$0]
            }
;
break;
case 45:
       this.$ = {
            tipo: 'tridimensional',
            valor: $$[$0]
            }
;
break;
case 46: case 56:

    this.$ = $$[$0-1];

break;
case 47:

    this.$ = [...$$[$0-2], $$[$0]]; // agregamos otra fila (lista unidimensional) a las filas ya existentes

break;
case 48:

    this.$ = [$$[$0]]; // primera fila

break;
case 49:

    this.$ = $$[$0-1]; // simplemente pasamos el arreglo de filas

break;
case 50:

    this.$ = [...$$[$0-2], $$[$0]]; // agregamos otra "matriz" (otra lista de listas) a las existentes

break;
case 51:

    this.$ = [$$[$0]]; // primera "matriz" (una lista bidimensional)

break;
case 52:

    this.$ = $$[$0-1]; // pasamos arreglo de matrices

break;
case 53:

    if ($$[$0].tipo === 'sin_modificacion') {
        this.$ = new AccesoLista.default($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    } else {
        this.$ = new ModificarLista.default($$[$0-2], $$[$0-1], $$[$0].valor, _$[$0-2].first_line, _$[$0-2].first_column);
    }

break;
case 54:

    this.$ = [...$$[$0-1], $$[$0]]; // Acumulamos los índices

break;
case 55:

    this.$ = [$$[$0]]; // Primer índice

break;
case 57:

    this.$ = {
        tipo: 'modificacion',
        valor: $$[$0]
    };

break;
case 58:

    this.$ = {
        tipo: 'sin_modificacion',
        valor: null
    };

break;
case 94:

        this.$ = new Imprimir.default($$[$0], _$[$0-1].first_line, _$[$0-1].first_column, "");
    
break;
case 95:

        this.$ = new Imprimir.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column, "\n");
    
break;
case 96:

    this.$ = new Minuscula.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);

break;
case 97:

    this.$ = new Mayuscula.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);

break;
case 102:
 this.$ = new Tipo.default(Tipo.tipo_dato.ENTERO)
break;
case 103:
 this.$ = new Tipo.default(Tipo.tipo_dato.DECIMAL)
break;
case 104:
 this.$ = new Tipo.default(Tipo.tipo_dato.CARACTER)
break;
case 105:
 this.$ = new Tipo.default(Tipo.tipo_dato.BOOLEANO)
break;
case 106:
 this.$ = new Tipo.default(Tipo.tipo_dato.CADENA)
break;
case 107:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]) 
break;
case 111:
 this.$ = new Relacionales.default(Relacionales.Operadores.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 112:
 this.$ = new Relacionales.default(Relacionales.Operadores.DIF, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 113:
 this.$ = new Relacionales.default(Relacionales.Operadores.MAYORI, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 114:
 this.$ = new Relacionales.default(Relacionales.Operadores.MENORI, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 115:
 this.$ = new Relacionales.default(Relacionales.Operadores.MENOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 116:
 this.$ = new Relacionales.default(Relacionales.Operadores.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 117:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 118:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 119:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MUL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 120:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIV, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 121:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MOD, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 122:
 this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POW, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 123:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 124:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 125:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 126:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 127: case 128:
 this.$ = new Nativo.default(new Tipo.default(Tipo.tipo_dato.BOOLEANO), $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 129:
 this.$ = new AccesoVariable.default($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 130:
 this.$ = $$[$0-1] 
break;
case 131: case 132: case 133: case 134: case 135:
 this.$ = $$[$0] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{1:[3]},{2:$V0,5:[1,52],6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),{31:54,38:[1,57],52:[1,55],102:[1,56]},{37:$Vo,39:[1,58]},{33:60,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt},{46:[1,66]},o([37,39],$Vu,{59:67,61:69,62:$Vv,105:[1,68]}),{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:71,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:89,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{38:[1,90]},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:91,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{2:$V0,4:92,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},o($Vn,[2,73]),o($Vn,[2,74]),o($Vn,[2,75]),{38:[1,93]},{38:[1,94]},{38:[1,95]},{38:[1,96]},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:97,84:83,108:[1,98],109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{46:[1,99]},{46:[1,100]},{46:[1,101]},{46:[1,102]},{46:[2,40]},{46:[2,41]},{1:[2,1]},o($Vn,[2,2]),{32:[1,103],37:$Vo},{46:[1,104]},{38:[1,105]},o([32,37],$Vu),{9:82,12:84,36:108,38:$Vw,40:106,41:[1,107],44:109,45:110,46:$Vx,48:111,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{38:[1,112]},{47:[1,113]},o($VI,[2,102]),o($VI,[2,103]),o($VI,[2,104]),o($VI,[2,105]),o($VI,[2,106]),{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:114,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($VJ,[2,58],{60:115,61:116,62:$Vv,64:[1,117]}),{38:[1,118]},o($VK,[2,55]),{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:119,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{66:[1,120],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:135,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:136,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($VJ,[2,123]),o($VJ,[2,124]),o($VJ,[2,125]),o($VJ,[2,126]),o($VJ,[2,127]),o($VJ,[2,128]),o($VJ,[2,129],{59:67,61:69,62:$Vv,141:$VZ,142:$V_}),{9:82,12:84,33:60,38:$Vw,44:85,45:86,46:$Vx,48:139,84:83,109:$Vy,110:$Vz,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($VJ,[2,131]),o($VJ,[2,132]),o($VJ,[2,133]),o($VJ,[2,134]),o($VJ,[2,135]),{46:[1,140]},{46:[1,141]},{73:[1,142],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{39:[1,143]},{73:[1,144],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,89:[1,145],90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{33:146,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt},{2:$V0,4:149,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,94:147,96:$Vf,98:$V$,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{46:[1,150],105:[1,151]},{46:[1,152]},o($Vn,[2,94],{120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:153,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:154,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:155,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:156,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:157,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{33:158,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:159,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{38:[1,160]},o($Vn,[2,33]),{38:[1,161]},o($Vn,[2,35],{37:$V01}),o($V11,[2,36]),o($V11,[2,37]),o($V21,$V31,{120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o([32,37,39],[2,31]),{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:163,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{47:[1,164],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},o($VJ,[2,53]),o($VK,[2,54]),{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:165,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($Vn,[2,90]),{63:[1,166],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{2:$V0,4:167,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:168,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:169,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:170,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:171,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:172,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:173,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:174,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:175,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:176,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:177,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:178,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:179,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:180,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:181,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($VJ,[2,107]),o($V41,[2,108],{120:$VL,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($VJ,[2,140]),o($VJ,[2,141]),{47:$V51,120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:183,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:184,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{74:185,77:186,78:$V61},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:188,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{2:$V0,4:189,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:190,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{2:$V0,4:149,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,94:191,96:$Vf,98:$V$,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{97:[1,192]},{46:[1,193]},o($V71,[2,79],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:29,49:31,6:53,2:$V0,30:$V1,38:$V2,46:$V3,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm}),{9:82,12:84,36:195,38:$Vw,44:85,45:86,46:$Vx,47:[2,82],48:111,84:83,101:194,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{38:[1,196]},{38:$V81,103:197,104:198},o($Vn,[2,95],{120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),{47:[1,200],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{47:[1,201],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{47:[1,202],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{47:[1,203],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},o($Vn,[2,30],{34:204,35:[1,205]}),{37:[1,206],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{39:[1,207]},{2:$V0,4:209,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,42:208,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,98:[1,210],100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:211,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($V91,[2,38],{120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vn,[2,39]),o($V91,[2,57],{120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($VK,[2,56]),{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,67:212,68:213,69:$Va1,70:$Vb1,71:$Vc1,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},o([2,5,30,37,38,43,46,47,50,51,63,65,66,69,70,71,72,73,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,93,95,96,97,100,102,107,111,112,113,114,122],[2,109],{120:$VL,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($V41,[2,110],{120:$VL,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vd1,[2,111],{120:$VL,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vd1,[2,112],{120:$VL,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vd1,[2,113],{120:$VL,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vd1,[2,114],{120:$VL,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vd1,[2,115],{120:$VL,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vd1,[2,116],{120:$VL,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Ve1,[2,117],{131:$VV,132:$VW,133:$VX,134:$VY}),o($Ve1,[2,118],{131:$VV,132:$VW,133:$VX,134:$VY}),o($Vf1,[2,119],{134:$VY}),o($Vf1,[2,120],{134:$VY}),o($Vf1,[2,121],{134:$VY}),o($Vf1,[2,122],{134:$VY}),o($VJ,[2,130]),{47:[1,217],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{47:[1,218],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{75:[1,219],77:220,78:$V61},o($Vg1,[2,66]),{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:221,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{80:[1,222],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,87:[1,223],88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},o($Vn,[2,72],{120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),{95:[1,224]},o($Vn,[2,77]),{38:$Vh1,99:225},{47:[1,227]},{37:$V01,47:[2,81]},{46:[1,228]},{38:$V81,47:[1,229],104:230},o($Vi1,[2,85]),{33:231,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt},o($Vn,[2,98]),o($Vn,[2,99]),o($Vn,[2,100]),o($Vn,[2,101]),o($Vn,[2,28]),{9:82,12:84,36:232,38:$Vw,44:85,45:86,46:$Vx,48:111,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{33:233,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt},{38:[1,234]},{43:[1,235]},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,43:[2,87],46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{46:[1,236]},o($V21,[2,138],{120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY}),o($Vn,[2,59]),o($Vn,[2,60]),o($Vn,[2,61]),{2:$V0,4:237,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{2:$V0,4:238,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},o($VJ,[2,96]),o($VJ,[2,97]),{2:$V0,4:239,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},o($Vg1,[2,65]),{66:[1,240],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{9:82,12:84,38:$Vw,44:85,45:86,46:$Vx,48:241,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($Vn,[2,71]),o($Vn,[2,76]),{37:$Vj1,47:[1,242]},{33:244,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt},o($Vn,[2,80]),{9:82,12:84,36:246,38:$Vw,44:85,45:86,46:$Vx,47:[2,93],48:111,84:83,106:245,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($Vn,[2,83]),o($Vi1,[2,84]),o($Vi1,[2,86]),o($Vn,[2,29],{37:$V01}),{47:[1,247]},{46:[1,248]},o($Vn,[2,34]),{38:$Vh1,99:249},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,69:[1,250],72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,67:251,68:213,69:$Va1,70:$Vb1,71:$Vc1,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,76:[1,252],79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{2:$V0,4:253,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{81:254,83:[1,255],85:[1,256],120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{2:$V0,4:257,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{38:[1,258]},o($Vk1,[2,137]),{47:[1,259]},{37:$V01,47:[2,92]},{38:[1,260]},{9:82,12:84,36:261,38:$Vw,44:85,45:86,46:$Vx,48:111,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},{37:$Vj1,47:[1,262]},o($Vn,[2,62]),o($Vn,[2,63]),o($Vn,[2,64]),o($Vg1,[2,67],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:29,49:31,6:53,2:$V0,30:$V1,38:$V2,46:$V3,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm}),{73:[1,263]},{38:$Vl1,84:264},{38:$Vl1,84:266},o($V71,[2,78],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:29,49:31,6:53,2:$V0,30:$V1,38:$V2,46:$V3,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm}),{33:267,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt},o($Vn,[2,91]),{39:[1,268]},{37:$V01,47:[1,269]},{2:$V0,4:270,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{2:$V0,4:271,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{73:[2,69]},{141:$VZ,142:$V_},{73:[2,70]},o($Vk1,[2,136]),{46:[1,276],53:272,54:273,55:274,56:275},o($Vn,[2,89]),{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,43:[2,88],46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:$V1,31:29,38:$V2,46:$V3,49:31,50:$V4,51:$V5,65:$V6,72:$V7,79:$V8,82:[1,277],86:$V9,88:$Va,90:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,100:$Vg,102:$Vh,107:$Vi,111:$Vj,112:$Vk,113:$Vl,114:$Vm},o($Vn,[2,42]),o($Vn,[2,43]),o($Vn,[2,44]),o($Vn,[2,45]),{9:82,12:84,36:278,38:$Vw,44:85,45:86,46:[1,283],48:111,54:281,55:282,57:279,58:280,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($Vn,[2,68]),{37:$V01,47:[1,284]},{37:[1,286],47:[1,285]},{37:[1,288],47:[1,287]},o($Vk1,[2,48]),o($Vk1,[2,51]),{9:82,12:84,33:60,36:278,38:$Vw,44:85,45:86,46:[1,290],48:289,54:281,57:279,84:83,109:$Vy,110:$Vz,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($V21,[2,46]),o($V21,[2,49]),{46:$Vm1,54:291},o($Vn,[2,52]),{46:[1,294],55:293},{37:$V31,47:$V51,120:$VL,122:$VM,123:$VN,124:$VO,125:$VP,126:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW,133:$VX,134:$VY},{9:82,12:84,33:60,36:278,38:$Vw,44:85,45:86,46:$Vx,48:289,84:83,109:$Vy,110:$Vz,115:$Vp,116:$Vq,117:$Vr,118:$Vs,119:$Vt,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($Vk1,[2,47]),{9:82,12:84,36:278,38:$Vw,44:85,45:86,46:$Vx,48:111,84:83,109:$Vy,110:$Vz,120:$VA,121:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH},o($Vk1,[2,50]),{46:$Vm1,54:281,57:279}],
defaultActions: {50:[2,40],51:[2,41],52:[2,1],264:[2,69],266:[2,70]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

// Aquí se incluyen las acciones semánticas de JavaScript necesarias.
const Aritmeticas = require('./Expresiones/Aritmeticas')
const Nativo = require('./Expresiones/Nativo')
const AccesoLista = require('./Expresiones/AccesoLista')
const AccesoVariable = require('./Expresiones/AccesoVariable')
const ModificarLista = require('./Expresiones/ModificarLista')
const Relacionales = require('./Expresiones/Relacionales')

const Tipo = require('./Simbolo/Tipo')

const CreacionVariable = require('./Instrucciones/CreacionVariable')
const Declaracion = require('./Instrucciones/Declaracion')
const Imprimir = require('./Instrucciones/Imprimir')
const Asignacion = require('./Instrucciones/AsignacionVariable')
const Casteo = require('./Instrucciones/Casteo')
const IncrementoDecremento = require('./Instrucciones/IncrementoDecremento')
const ListaUnidimensional = require('./Instrucciones/ListaUnidimensional')
const ListaBidimensional = require('./Instrucciones/ListaBidimensional')
const ListaTridimensional = require('./Instrucciones/ListaTridimensional')
const Minuscula = require('./Instrucciones/Minuscula')
const Mayuscula = require('./Instrucciones/Mayuscula')

//variables para la cadena:
    var cadenaa="";
    let caracter ="";

    //Aca tambien puedo agregar codigo en javascript

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://para ignorar espacios en blanco
break;
case 1://comentario en linea
break;
case 2://comentario de varias lineas
break;
case 3:return 115;
break;
case 4:return 116;
break;
case 5:return 117;
break;
case 6:return 118;
break;
case 7:return 119;
break;
case 8:return 'NULL';
break;
case 9:return 39;
break;
case 10:return 46;
break;
case 11:return 47;
break;
case 12:return 37;
break;
case 13:return 141;
break;
case 14:return 142;
break;
case 15:return 105;
break;
case 16:return 140;
break;
case 17:return 139;
break;
case 18:return 64;
break;
case 19:return 124;
break;
case 20:return 125;
break;
case 21:return 127;
break;
case 22:return 126;
break;
case 23:return 120;
break;
case 24:return 134;
break;
case 25:return 131;
break;
case 26:return 132;
break;
case 27:return 133;
break;
case 28:return 130;
break;
case 29:return 128;
break;
case 30:return 129;
break;
case 31:return 121;
break;
case 32:return 123;
break;
case 33:return 122;
break;
case 34:return 62;
break;
case 35:return 63;
break;
case 36:return 30;
break;
case 37:return 32;
break;
case 38:return 35;
break;
case 39:return 65;
break;
case 40:return 66;
break;
case 41:return 69;
break;
case 42:return 70;
break;
case 43:return 71;
break;
case 44:return 72;
break;
case 45:return 73;
break;
case 46:return 78;
break;
case 47:return 90;
break;
case 48:return 76;
break;
case 49:return 75;
break;
case 50:return 79;
break;
case 51:return 80;
break;
case 52:return 83;
break;
case 53:return 85;
break;
case 54:return 82;
break;
case 55:return 86;
break;
case 56:return 87;
break;
case 57:return 88;
break;
case 58:return 89;
break;
case 59:return 90;
break;
case 60:return 91;
break;
case 61:return 92;
break;
case 62:return 93;
break;
case 63:return 95;
break;
case 64:return 98;
break;
case 65:return 96;
break;
case 66:return 97;
break;
case 67:return 100;
break;
case 68:return 102;
break;
case 69:return 41;
break;
case 70:return 43;
break;
case 71:return 107;
break;
case 72:return 109;
break;
case 73:return 110;
break;
case 74:return 111;
break;
case 75:return 112;
break;
case 76:return 113;
break;
case 77:return 114;
break;
case 78:return 50;
break;
case 79:return 51;
break;
case 80:return 52;
break;
case 81:return 108;
break;
case 82:return "DECIMAL_VALOR";
break;
case 83:return "ENTERO_VALOR";
break;
case 84: cadenaa=""; this.begin("stringss"); 
break;
case 85: cadenaa+=yy_.yytext; 
break;
case 86: cadenaa+="\""; 
break;
case 87: cadenaa+="\n"; 
break;
case 88: cadenaa+=" ";  
break;
case 89: cadenaa+="\t"; 
break;
case 90: cadenaa+="\\"; 
break;
case 91: cadenaa+="\'"; 
break;
case 92: console.log("Agregando a cadena:", yy_.yytext); cadenaa+=yy_.yytext; 
break;
case 93: yy_.yytext=cadenaa; this.popState(); return 137; 
break;
case 94: caracter=""; this.begin("caracter"); 
break;
case 95: caracter=yy_.yytext; 
break;
case 96: caracter="\""; 
break;
case 97: caracter="\n"; 
break;
case 98: caracter=" ";  
break;
case 99: caracter="\t"; 
break;
case 100: caracter="\\"; 
break;
case 101: caracter="\'"; 
break;
case 102: yy_.yytext=caracter; this.popState(); return 138; 
break;
case 103:return "IDENTIFICADOR";
break;
case 104:
break;
case 105: console.log("Error lexico: "+yy_.yytext);
break;
case 106:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:boolean\b)/,/^(?:cadena\b)/,/^(?:null\b)/,/^(?:->)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\.)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:-)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\[)/,/^(?:\])/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:si\b)/,/^(?:entonces\b)/,/^(?:fin si\b)/,/^(?:de lo contrario\b)/,/^(?:o si\b)/,/^(?:segun\b)/,/^(?:hacer\b)/,/^(?:en caso de ser\b)/,/^(?:detener\b)/,/^(?:fin segun\b)/,/^(?:de lo contrario entonces\b)/,/^(?:para\b)/,/^(?:hasta\b)/,/^(?:con incremento\b)/,/^(?:con decremento\b)/,/^(?:fin para\b)/,/^(?:mientras\b)/,/^(?:fin mientras\b)/,/^(?:repetir\b)/,/^(?:hasta que\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:retonar\b)/,/^(?:funcion\b)/,/^(?:fin funcion\b)/,/^(?:con parametros\b)/,/^(?:procedimiento\b)/,/^(?:fin procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:objeto\b)/,/^(?:metodo\b)/,/^(?:fin metodo\b)/,/^(?:imprimir\b)/,/^(?:minuscula\b)/,/^(?:mayuscula\b)/,/^(?:longitud\b)/,/^(?:truncar\b)/,/^(?:redondear\b)/,/^(?:tipo\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:Lista\b)/,/^(?:nl\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:[^"\\]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\')/,/^(?:['])/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[\ \r\t\f\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"caracter":{"rules":[95,96,97,98,99,100,101,102],"inclusive":false},"stringss":{"rules":[85,86,87,88,89,90,91,92,93],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,103,104,105,106],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}